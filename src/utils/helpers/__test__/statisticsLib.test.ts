import { format, fromUnixTime } from 'date-fns';

import { MyMockType } from '@utils/types/MockType';
import {
  IStatistic,
  MarketCoinRespone,
  TMiningInfo,
  TMempoolInfo,
  TNettotalsInfo,
  TAverageBlockSize,
  TTransactionPerSecond,
  IHashRateResponse,
  TTransactionsChart,
  TChartResponseItem,
  TChartStatisticsResponse,
  THashrate,
} from '../../types/IStatistics';
import { IBlock } from '../../types/IBlocks';
import { ITransaction } from '../../types/ITransactions';
import { ISocketData } from '../../types/ISocketData';
import {
  makeDownloadFileName,
  transformDifficultyInfo,
  transformPriceInfo,
  transformMarketVolumePriceInfo,
  transformMarketCapPriceInfo,
  transformHashrateInfo,
  transformMempoolInfo,
  transformNetTotals,
  transformBlocks,
  transformAverageBlockSize,
  transformTransactionPerSecond,
  transformChartData,
  transformBlockchainSizeData,
  transformTotalTransactionCount,
  convertYAxisLabel,
  setTransactionsLive,
  transformStatisticsChart,
  transformAccountDataChart,
  transformTotalSupplyDataChart,
  generatePeriodToDropdownOptions,
  transformHashRateCharts,
  generateXAxisInterval,
  generateMinMaxChartData,
  getMinMax,
  toPlainString,
  transformLineChartData,
  generateXAxisIntervalForScatterChart,
  getFractionDigits,
  getYAxisLabel,
  transformFingerprintsData,
  transformTransactionsChartData,
} from '../statisticsLib';
import { formattedDate } from '../date/date';
import { periods } from '../../constants/statistics';

import { OptionsProps } from '../../../components/Dropdown/Dropdown';

import i18next from '../i18n';

describe('utils/helpers/statisticsLib', () => {
  test('makeDownloadFileName should works correctly', () => {
    const date = new Date();
    expect(makeDownloadFileName('PSL', 'Network Difficulty')).toMatch(
      `PSL_Network_Difficulty_${date.getMonth() + 1}_${date.getDate()}_${date.getFullYear()}__`,
    );
  });

  test('transformDifficultyInfo should works correctly', () => {
    const difficulties = [
      {
        difficulty: 721584.1575907764,
        timestamp: 1676232070411,
      },
      {
        difficulty: 758675.8999315507,
        timestamp: 1676232190287,
      },
    ];
    const dataX: string[] = [
      format(Number(1676232070411), 'MM/dd/yyyy hh:mm aa'),
      format(Number(1676232190287), 'MM/dd/yyyy hh:mm aa'),
    ];
    const dataY: number[] = [721584.1575907764, 758675.8999315507];
    expect(transformDifficultyInfo(difficulties as IStatistic[], '30d')).toEqual({ dataX, dataY });
  });

  test('transformPriceInfo should works correctly', () => {
    const data = [
      {
        btcPrice: 2.8352e-8,
        timestamp: 1676232070411,
        usdPrice: 0.00062412,
      },
      {
        btcPrice: 2.8352e-8,
        timestamp: 1676232190287,
        usdPrice: 0.00062409,
      },
    ];
    const dataX: string[] = [
      new Date(Number(1676232070411)).toLocaleString(),
      new Date(Number(1676232190287)).toLocaleString(),
    ];
    const dataY1: number[] = [0.00062412, 0.00062409];
    const dataY2: number[] = [2.8352e-8, 2.8352e-8];
    expect(transformPriceInfo(data as IStatistic[], '30d')).toEqual({ dataX, dataY1, dataY2 });
  });

  test('transformMarketVolumePriceInfo should works correctly', () => {
    const data = {
      prices: [
        [1678683955385, 0.0005019837334322717],
        [1678684202590, 0.0005019218027157225],
      ],
      total_volumes: [
        [1678683955385, 655185.9429493941],
        [1678684202590, 657388.223449931],
      ],
    };
    const dataX: string[] = [
      new Date(Number(1678683955385)).toLocaleString(),
      new Date(Number(1678684202590)).toLocaleString(),
    ];
    const dataY1: number[] = [0.00050198, 0.00050192];
    const dataY2: number[] = [655185.94, 657388.22];
    expect(transformMarketVolumePriceInfo(data as MarketCoinRespone, '30d')).toEqual({
      dataX,
      dataY1,
      dataY2,
    });
  });

  test('transformMarketCapPriceInfo should works correctly', () => {
    const data = {
      prices: [
        [1678683955385, 0.0005019837334322717],
        [1678684202590, 0.0005019218027157225],
      ],
      market_caps: [
        [1678683955385, 4951047.549501037],
        [1678684202590, 4951047.549501037],
      ],
    };
    const dataX: string[] = [
      new Date(Number(1678683955385)).toLocaleString(),
      new Date(Number(1678684202590)).toLocaleString(),
    ];
    const dataY1: number[] = [0.00050198, 0.00050192];
    const dataY2: number[] = [4951048, 4951048];
    expect(transformMarketCapPriceInfo(data as MarketCoinRespone, '30d')).toEqual({
      dataX,
      dataY1,
      dataY2,
    });
  });

  test('transformHashrateInfo should works correctly', () => {
    const data = [
      {
        networksolps: 150554,
        timestamp: 1678770979654,
      },
      {
        networksolps: 147341,
        timestamp: 1678770859746,
      },
    ];
    const dataX: string[] = [
      format(1678770979654, 'MM/dd/yyyy hh:mm aa'),
      format(1678770859746, 'MM/dd/yyyy hh:mm aa'),
    ];
    const dataY: number[] = [0.150554, 0.147341];
    expect(transformHashrateInfo(data as TMiningInfo[])).toEqual({
      dataX,
      dataY,
    });
  });

  test('transformMempoolInfo should works correctly', () => {
    const data = [
      {
        usage: 32,
        timestamp: 1676232076257,
      },
      {
        usage: 1168,
        timestamp: 1676232195453,
      },
    ];
    const dataX: string[] = [
      new Date(Number(1676232076257)).toLocaleString(),
      new Date(Number(1676232195453)).toLocaleString(),
    ];
    const dataY: number[] = [0.032, 1.168];
    expect(transformMempoolInfo(data as TMempoolInfo[], '30d')).toEqual({
      dataX,
      dataY,
    });
  });

  test('transformNetTotals should works correctly', () => {
    const data = [
      {
        totalbytesrecv: 8048939455,
        totalbytessent: 709258986,
        timemillis: 1676160068747,
      },
      {
        totalbytesrecv: 8048940569,
        totalbytessent: 709262374,
        timemillis: 1676160128694,
      },
    ];
    const dataX: string[] = [
      new Date(Number(1676160068747)).toLocaleString(),
      new Date(Number(1676160128694)).toLocaleString(),
    ];
    const dataY1: number[] = [7860292.4365234375, 7860293.5244140625];
    const dataY2: number[] = [692635.728515625, 692639.037109375];
    expect(transformNetTotals(data as TNettotalsInfo[], '30d')).toEqual({
      dataX,
      dataY1,
      dataY2,
    });
  });

  test('transformBlocks should works correctly', () => {
    const data = [
      {
        timestamp: 1678728975,
        height: 243931,
        transactionCount: 2,
      },
      {
        timestamp: 1678729083,
        height: 243932,
        transactionCount: 1,
      },
    ];
    const dataX: string[] = [
      new Date(1678728975000).toLocaleString(),
      new Date(1678729083000).toLocaleString(),
    ];
    const dataY: number[][] = [
      [243931, 2],
      [243932, 1],
    ];
    expect(transformBlocks(data as IBlock[])).toEqual({
      data: dataY,
      dataX,
    });
  });

  test('transformAverageBlockSize should works correctly', () => {
    const data = [
      {
        maxTime: 1676231977,
        minTime: 1676231977,
        size: 2131,
      },
      {
        maxTime: 1676235567,
        minTime: 1676232126,
        size: 2028.59375,
      },
      {
        maxTime: 1676239141,
        minTime: 1676235634,
        size: 2003.2051282051282,
      },
      {
        maxTime: 1676242605,
        minTime: 1676239483,
        size: 2097.45,
      },
    ];
    const dataX: string[] = [
      format(1676231977000, 'MM/dd/yyyy HH:mm'),
      format(1676232126000, 'MM/dd/yyyy HH:mm'),
      format(1676235634000, 'MM/dd/yyyy HH:mm'),
      format(1676242605000, 'MM/dd/yyyy HH:mm'),
    ];
    const dataY: number[] = [
      0.0002131, 0.000202859375, 0.00020032051282051281, 0.00020974499999999998,
    ];
    expect(transformAverageBlockSize(data as TAverageBlockSize[], '30d')).toEqual({
      dataX,
      dataY,
    });
  });

  test('transformTransactionPerSecond should works correctly', () => {
    const data = [
      {
        size: 2,
        time: 1676231977000,
      },
      {
        size: 52,
        time: 1676232126000,
      },
      {
        size: 58,
        time: 1676235634000,
      },
      {
        size: 36,
        time: 1676239483000,
      },
    ];
    const dataX: string[] = [
      new Date(1676231977000).toLocaleString(),
      new Date(1676232126000).toLocaleString(),
      new Date(1676235634000).toLocaleString(),
      new Date(1676239483000).toLocaleString(),
    ];
    const dataY: number[] = [
      0.000023148148148148147, 0.0006018518518518519, 0.0006712962962962962, 0.0004166666666666667,
    ];
    expect(transformTransactionPerSecond(data as TTransactionPerSecond[], '30d', '')).toEqual({
      dataX,
      dataY,
    });
  });

  test('transformChartData should works correctly', () => {
    const data = [
      [1678770881, 6250.00393],
      [1678770881, 4987.50995],
      [1678770901, 6250],
    ];
    const dataX: string[] = [
      format(fromUnixTime(1678770881), 'MM/dd/yyyy hh:mm aa'),
      format(fromUnixTime(1678770881), 'MM/dd/yyyy hh:mm aa'),
      format(fromUnixTime(1678770901), 'MM/dd/yyyy hh:mm aa'),
    ];
    const dataY: number[] = [6250.004, 4987.51, 6250];
    expect(transformChartData({ data } as IHashRateResponse)).toEqual({
      dataX,
      dataY,
    });

    const dataX1: string[] = [
      formattedDate(1678770881, { onlyDayMonthYear: true }),
      formattedDate(1678770881, { onlyDayMonthYear: true }),
      formattedDate(1678770901, { onlyDayMonthYear: true }),
    ];

    expect(transformChartData({ data } as IHashRateResponse, false)).toEqual({
      dataX: dataX1,
      dataY,
    });
  });

  test('transformBlockchainSizeData should works correctly', () => {
    const data = [
      {
        label: '1676231977000',
        value: 2131,
      },
      {
        label: '1676232126000',
        value: 1740,
      },
      {
        label: '1676232184000',
        value: 2132,
      },
    ];
    const dataX: string[] = [
      new Date(1676231977000).toLocaleString(),
      new Date(1676232126000).toLocaleString(),
      new Date(1676232184000).toLocaleString(),
    ];
    const dataY: number[] = [47.4, 47.4, 47.4];
    const endValue = 474006191;
    const startValue = 474000188;

    expect(
      transformBlockchainSizeData(data as TTransactionsChart[], '30d', startValue, endValue, 10e6),
    ).toEqual({
      dataX,
      dataY,
    });
  });

  test('transformTotalTransactionCount should works correctly', () => {
    const data = [
      {
        label: '1676231977',
        value: 2,
      },
      {
        label: '1676232126',
        value: 52,
      },
      {
        label: '1676232184',
        value: 58,
      },
    ];
    const dataX: string[] = [
      new Date(1676231977000).toLocaleString(),
      new Date(1676232126000).toLocaleString(),
      new Date(1676232184000).toLocaleString(),
    ];
    const dataY: number[] = [360943, 360995, 361053];
    const startValue = 360941;
    const endValue = 361053;

    expect(
      transformTotalTransactionCount(
        data as TChartResponseItem[],
        '30d',
        startValue,
        endValue,
        0,
        '',
      ),
    ).toEqual({
      dataX,
      dataY,
    });

    const dataY1: number[] = [460943, 460995, 461053];
    const startValueCache = 460941;
    const endValue1 = 461053;
    expect(
      transformTotalTransactionCount(
        data as TChartResponseItem[],
        '30d',
        startValue,
        endValue1,
        startValueCache,
        '',
      ),
    ).toEqual({
      dataX,
      dataY: dataY1,
    });
  });

  test('convertYAxisLabel should works correctly', () => {
    expect(convertYAxisLabel(0.11558, 1, 2)).toEqual('0.12');
    expect(convertYAxisLabel(0.11558, 1, 4)).toEqual('0.1156');
    expect(convertYAxisLabel(-0.11558, 1, 2)).toEqual(-0.11558);

    expect(convertYAxisLabel(10, 2512, 2)).toEqual('0.01K');
    expect(convertYAxisLabel(1554, 2512, 2)).toEqual('1.55K');

    expect(convertYAxisLabel(500000, 8500000, 2)).toEqual('0.5M');
    expect(convertYAxisLabel(5461585, 8500000, 2)).toEqual('5.46M');

    expect(convertYAxisLabel(700000000, 9800000000, 2)).toEqual('0.7B');
    expect(convertYAxisLabel(5600000000, 9800000000, 2)).toEqual('5.6B');
  });

  test('setTransactionsLive should works correctly', () => {
    const prevBlocks = new Map<string, ITransaction>();
    prevBlocks.set('16fdd4172dd995d4c52d4504c8a1f3869e9b7a6171aaa54a45edb74f4101e827', {
      block: {
        height: '244266',
        confirmations: 1,
      },
      blockHash: '00000065b9f29214f6f6eb7564417489248beb0363fb032616a17e1b33350895',
      coinbase: 0,
      id: '16fdd4172dd995d4c52d4504c8a1f3869e9b7a6171aaa54a45edb74f4101e827',
      isNonStandard: 1,
      rawData: '',
      fee: 0,
      height: 244266,
      totalAmount: 6250.01,
      recipientCount: 3,
      timestamp: 1678778815,
      size: 252,
    } as ITransaction);
    prevBlocks.set('96de2f9886b9bdc3880f0ab500f1e2c62923aadf776439667de778e6f0fbd677', {
      block: {
        height: '244266',
        confirmations: 1,
      },
      blockHash: '00000065b9f29214f6f6eb7564417489248beb0363fb032616a17e1b33350895',
      coinbase: 0,
      id: '96de2f9886b9bdc3880f0ab500f1e2c62923aadf776439667de778e6f0fbd677',
      isNonStandard: 1,
      rawData: '',
      fee: 0.00541,
      height: 244266,
      totalAmount: 9986.97,
      recipientCount: 2,
      timestamp: 1678778815,
      size: 539,
    } as ITransaction);
    prevBlocks.set('1143bf87bdddc5d9a32084b91a87a1d2ba3c48f7f3815778c532bd3d60d26671', {
      block: {
        height: '244265',
        confirmations: 1,
      },
      blockHash: '00000036920f7c42a7b17b97c1fcdc1b2b78b0558f26b5d7a8a5f078ea5f733d',
      coinbase: 0,
      id: '1143bf87bdddc5d9a32084b91a87a1d2ba3c48f7f3815778c532bd3d60d26671',
      isNonStandard: 1,
      rawData: '',
      fee: 0,
      height: 244265,
      totalAmount: 6250,
      recipientCount: 3,
      timestamp: 1678778357,
      size: 252,
    } as ITransaction);
    prevBlocks.set('0377fa82e98b8842b2b5ae66720b614d1b9e9bcb1a8e3561c90c3d44bb0132a5', {
      block: {
        height: '244265',
        confirmations: 1,
      },
      blockHash: '00000036920f7c42a7b17b97c1fcdc1b2b78b0558f26b5d7a8a5f078ea5f733d',
      coinbase: 0,
      id: '0377fa82e98b8842b2b5ae66720b614d1b9e9bcb1a8e3561c90c3d44bb0132a5',
      isNonStandard: 1,
      rawData: '',
      fee: 0.00393,
      height: 244265,
      totalAmount: 4999.47,
      recipientCount: 2,
      timestamp: 1678778357,
      size: 391,
    } as ITransaction);
    prevBlocks.set('321cdb11bec328499567888c89a2bca293787cf5648c0da5bbe6ef7d82fdb5fd', {
      block: {
        height: '244264',
        confirmations: 2,
      },
      blockHash: '00000012ee18d1eb6dee3f6b66e76b13daf0b009e093c81fdb5d52b71fa4ad25',
      coinbase: 0,
      id: '321cdb11bec328499567888c89a2bca293787cf5648c0da5bbe6ef7d82fdb5fd',
      isNonStandard: 1,
      rawData: '',
      fee: 0,
      height: 244264,
      totalAmount: 6250,
      recipientCount: 3,
      timestamp: 1678778305,
      size: 252,
    } as ITransaction);
    prevBlocks.set('071e4d45238b9ccf842370e692aa5b75d9726ed3fd440b67459d349285f6dd0f', {
      block: {
        height: '244263',
        confirmations: 1,
      },
      blockHash: '000000829de2613bbd06092d6c797a6d41758035f3737dcf636bc73c8fbc40d8',
      coinbase: 0,
      id: '071e4d45238b9ccf842370e692aa5b75d9726ed3fd440b67459d349285f6dd0f',
      isNonStandard: 1,
      rawData: '',
      fee: 0,
      height: 244263,
      totalAmount: 6250,
      recipientCount: 3,
      timestamp: 1678778245,
      size: 252,
    } as ITransaction);

    const data: ISocketData = {
      blocks: [],
      unconfirmedTransactions: [
        {
          blockhash: null,
          blocktime: 0,
          confirmations: 0,
          expiryheight: 244287,
          hex: '0400008085202f8902326ebffe501dfd6b05c02eed6b82936f4120f702557770c311a241ba82f91578000000006b483045022100cd4667826a3e9877303ba2d743e0feaa1699259b6ee0c09a5fbbd05fab0765b902206894749d8b54803d4b3c07636af2bb07f888bb0377b4f9af301a0d253f21b7d60121025ed16d1bec73a85e09351502f72db13f93058eb86cb6b98ee611e3a15b9b5068feffffff77d6fbf0e678e77d66396477dfaa2329c6e2f100b50a0f88c3bdb986982fde96010000006a47304402201c80e41a55f1ff597393162514a6654e506c7148280f264fab305ea6a74aed1d022070ae5d9e7b7581b610bc480d1e17da710d931d79c6ff4e490ec48730e6092e54012103e1226471e30e0b53835c66d2573a0f22a864305519ff1b1deb999b546dbde729feffffff02da421200000000001976a91402153a56d4e2f5f5dbd6caf7d56004ead2377fe588acb853ba1d000000001976a914d410733520096f236528c6c5e5a29d27f0a1743188ac20ba03003fba03000000000000000000000000',
          locktime: 244256,
          overwintered: true,
          time: 1678778921,
          txid: '36c0e7fde4637600e1a98c1970ebe14d1725bc4eaacc874b8819aeaaa9c17936',
          vShieldedOutput: [],
          vShieldedSpend: [],
          valueBalance: 0,
          version: 4,
          versiongroupid: '892f2085',
          vin: [
            {
              coinbase: '',
              sequence: 4294967294,
            },
            {
              coinbase: '',
              sequence: 4294967294,
            },
          ],
          vout: [
            {
              value: 11.96762,
              valueZat: 1196762,
              n: 0,
              scriptPubKey: {
                asm: 'OP_DUP OP_HASH160 02153a56d4e2f5f5dbd6caf7d56004ead2377fe5 OP_EQUALVERIFY OP_CHECKSIG',
                hex: '76a91402153a56d4e2f5f5dbd6caf7d56004ead2377fe588ac',
                reqSigs: 1,
                type: 'pubkeyhash',
                addresses: ['tPRenwdZ27QaqipW6hZm9ha9kQiGcnptT4R'],
              },
            },
            {
              value: 4987.50392,
              valueZat: 498750392,
              n: 1,
              scriptPubKey: {
                asm: 'OP_DUP OP_HASH160 d410733520096f236528c6c5e5a29d27f0a17431 OP_EQUALVERIFY OP_CHECKSIG',
                hex: '76a914d410733520096f236528c6c5e5a29d27f0a1743188ac',
                reqSigs: 1,
                type: 'pubkeyhash',
                addresses: ['tPko57whv91C4j322DaRHymTgXzc4Qoadcj'],
              },
            },
          ],
          vjoinsplit: [],
          fee: 0.00392,
          height: 244266,
          size: 392,
        },
      ],
      rawTransactions: [],
    };

    const results = new Map<string, ITransaction>();
    results.set('36c0e7fde4637600e1a98c1970ebe14d1725bc4eaacc874b8819aeaaa9c17936', {
      block: {
        height: '',
        confirmations: 0,
      },
      blockHash: '',
      coinbase: 0,
      id: '36c0e7fde4637600e1a98c1970ebe14d1725bc4eaacc874b8819aeaaa9c17936',
      isNonStandard: 1,
      rawData: '',
      fee: 0.00392,
      height: 0,
      totalAmount: 4999.47,
      recipientCount: 2,
      timestamp: 1678778921,
      size: 392,
    } as ITransaction);
    results.set('16fdd4172dd995d4c52d4504c8a1f3869e9b7a6171aaa54a45edb74f4101e827', {
      block: {
        height: '244266',
        confirmations: 1,
      },
      blockHash: '00000065b9f29214f6f6eb7564417489248beb0363fb032616a17e1b33350895',
      coinbase: 0,
      id: '16fdd4172dd995d4c52d4504c8a1f3869e9b7a6171aaa54a45edb74f4101e827',
      isNonStandard: 1,
      rawData: '',
      fee: 0,
      height: 244266,
      totalAmount: 6250.01,
      recipientCount: 3,
      timestamp: 1678778815,
      size: 252,
    } as ITransaction);
    results.set('96de2f9886b9bdc3880f0ab500f1e2c62923aadf776439667de778e6f0fbd677', {
      block: {
        height: '244266',
        confirmations: 1,
      },
      blockHash: '00000065b9f29214f6f6eb7564417489248beb0363fb032616a17e1b33350895',
      coinbase: 0,
      id: '96de2f9886b9bdc3880f0ab500f1e2c62923aadf776439667de778e6f0fbd677',
      isNonStandard: 1,
      rawData: '',
      fee: 0.00541,
      height: 244266,
      totalAmount: 9986.97,
      recipientCount: 2,
      timestamp: 1678778815,
      size: 539,
    } as ITransaction);
    results.set('1143bf87bdddc5d9a32084b91a87a1d2ba3c48f7f3815778c532bd3d60d26671', {
      block: {
        height: '244265',
        confirmations: 1,
      },
      blockHash: '00000036920f7c42a7b17b97c1fcdc1b2b78b0558f26b5d7a8a5f078ea5f733d',
      coinbase: 0,
      id: '1143bf87bdddc5d9a32084b91a87a1d2ba3c48f7f3815778c532bd3d60d26671',
      isNonStandard: 1,
      rawData: '',
      fee: 0,
      height: 244265,
      totalAmount: 6250,
      recipientCount: 3,
      timestamp: 1678778357,
      size: 252,
    } as ITransaction);
    results.set('0377fa82e98b8842b2b5ae66720b614d1b9e9bcb1a8e3561c90c3d44bb0132a5', {
      block: {
        height: '244265',
        confirmations: 1,
      },
      blockHash: '00000036920f7c42a7b17b97c1fcdc1b2b78b0558f26b5d7a8a5f078ea5f733d',
      coinbase: 0,
      id: '0377fa82e98b8842b2b5ae66720b614d1b9e9bcb1a8e3561c90c3d44bb0132a5',
      isNonStandard: 1,
      rawData: '',
      fee: 0.00393,
      height: 244265,
      totalAmount: 4999.47,
      recipientCount: 2,
      timestamp: 1678778357,
      size: 391,
    } as ITransaction);
    results.set('321cdb11bec328499567888c89a2bca293787cf5648c0da5bbe6ef7d82fdb5fd', {
      block: {
        height: '244264',
        confirmations: 2,
      },
      blockHash: '00000012ee18d1eb6dee3f6b66e76b13daf0b009e093c81fdb5d52b71fa4ad25',
      coinbase: 0,
      id: '321cdb11bec328499567888c89a2bca293787cf5648c0da5bbe6ef7d82fdb5fd',
      isNonStandard: 1,
      rawData: '',
      fee: 0,
      height: 244264,
      totalAmount: 6250,
      recipientCount: 3,
      timestamp: 1678778305,
      size: 252,
    } as ITransaction);

    expect(setTransactionsLive(prevBlocks, data)).toEqual(results);
  });

  test('transformStatisticsChart should works correctly', () => {
    const data = [
      {
        value: 2,
        time: 1676231977000,
      },
      {
        value: 52,
        time: 1676232126000,
      },
      {
        value: 58,
        time: 1676235634000,
      },
      {
        value: 36,
        time: 1676239483000,
      },
    ];
    const dataX: string[] = [
      new Date(1676231977000).toLocaleString(),
      new Date(1676232126000).toLocaleString(),
      new Date(1676235634000).toLocaleString(),
      new Date(1676239483000).toLocaleString(),
    ];
    const dataY: number[] = [2, 52, 58, 36];
    expect(transformStatisticsChart(data as TChartStatisticsResponse[], '30d', '')).toEqual({
      dataX,
      dataY,
    });
  });

  test('transformAccountDataChart should works correctly', () => {
    const data = [
      {
        nonZeroAddressesCount: 2,
        timestamp: 1676231977000,
      },
      {
        nonZeroAddressesCount: 52,
        timestamp: 1676232126000,
      },
      {
        nonZeroAddressesCount: 58,
        timestamp: 1676235634000,
      },
      {
        nonZeroAddressesCount: 36,
        timestamp: 1676239483000,
      },
    ];
    const dataX: string[] = [
      new Date(1676231977000).toLocaleString(),
      new Date(1676232126000).toLocaleString(),
      new Date(1676235634000).toLocaleString(),
      new Date(1676239483000).toLocaleString(),
    ];
    const dataY: number[] = [2, 52, 58, 36];
    expect(transformAccountDataChart(data as IStatistic[], '30d', '')).toEqual({
      dataX,
      dataY,
    });
  });

  test('transformTotalSupplyDataChart should works correctly', () => {
    const data = [
      {
        coinSupply: 12177267928.851856,
        timestamp: 1676232070411,
        totalBurnedPSL: 862656.4999999998,
      },
      {
        coinSupply: 12177274178.851856,
        timestamp: 1676232190287,
        totalBurnedPSL: 862656.4999999998,
      },
      {
        coinSupply: 12177280428.855776,
        timestamp: 1676232250163,
        totalBurnedPSL: 862656.4999999998,
      },
      {
        coinSupply: 12177286678.861176,
        timestamp: 1676232489981,
        totalBurnedPSL: 862656.4999999998,
      },
    ];
    const dataX: string[] = [
      new Date(1676232070411).toLocaleString(),
      new Date(1676232190287).toLocaleString(),
      new Date(1676232250163).toLocaleString(),
      new Date(1676232489981).toLocaleString(),
    ];
    const dataY: number[] = [
      12176405272.351856, 12176411522.351856, 12176417772.355776, 12176424022.361176,
    ];
    expect(transformTotalSupplyDataChart(data as IStatistic[], '30d')).toEqual({
      dataX,
      dataY,
    });
  });

  test('generatePeriodToDropdownOptions should works correctly', () => {
    i18next.t = jest.fn().mockImplementation((...arg) => {
      return arg[1]?.period ? `Last ${arg[1]?.period}` : 'max';
    }) as MyMockType;

    const results: OptionsProps[] = [
      {
        name: 'Last 24h',
        value: '24h',
      },
      {
        name: 'Last 7d',
        value: '7d',
      },
      {
        name: 'Last 30d',
        value: '30d',
      },
      {
        name: 'Last 1y',
        value: '1y',
      },
      {
        name: 'max',
        value: 'max',
      },
    ];
    expect(generatePeriodToDropdownOptions(periods[7])).toEqual(results);
  });

  test('transformHashRateCharts should works correctly', () => {
    const data = [
      {
        networksolps5: 560,
        networksolps10: 1101,
        networksolps25: 2775,
        networksolps50: 5464,
        networksolps100: 10693,
        networksolps500: 40433,
        networksolps1000: 63534,
        timestamp: 1676232069618,
      },
      {
        networksolps5: 574,
        networksolps10: 1111,
        networksolps25: 2782,
        networksolps50: 5480,
        networksolps100: 10692,
        networksolps500: 40413,
        networksolps1000: 63557,
        timestamp: 1676232189549,
      },
      {
        networksolps5: 580,
        networksolps10: 1120,
        networksolps25: 2788,
        networksolps50: 5478,
        networksolps100: 10716,
        networksolps500: 40415,
        networksolps1000: 63575,
        timestamp: 1676232249432,
      },
    ];
    const dataX: string[] = [
      new Date(1676232069618).toLocaleString(),
      new Date(1676232189549).toLocaleString(),
      new Date(1676232249432).toLocaleString(),
    ];
    const networksolps = {
      solps5: [560, 574, 580],
      solps10: [1101, 1111, 1120],
      solps25: [2775, 2782, 2788],
      solps50: [5464, 5480, 5478],
      solps100: [10693, 10692, 10716],
      solps500: [40433, 40413, 40415],
      solps1000: [63534, 63557, 63575],
    };
    expect(transformHashRateCharts(data as THashrate[], '30d')).toEqual({
      dataX,
      networksolps,
    });
  });

  test('generateXAxisInterval should works correctly', () => {
    const dataX = [];
    for (let i = 1; i <= 6; i += 1) {
      dataX.push(`Mon Feb ${i} 2023 03:01:09 GMT+0700`);
    }
    const dataX1 = [];
    for (let i = 1; i <= 14; i += 1) {
      dataX1.push(`Mon Feb ${i} 2023 03:01:09 GMT+0700`);
    }
    const dataX2 = [];
    for (let i = 1; i <= 31; i += 1) {
      dataX2.push(`Mon Feb ${i} 2023 03:01:09 GMT+0700`);
    }
    const dataX3 = [];
    for (let i = 1; i <= 50; i += 1) {
      dataX3.push(`Mon Feb ${i} 2023 03:01:09 GMT+0700`);
    }
    expect(generateXAxisInterval('1d', undefined, dataX, 1500)).toEqual('auto');
    expect(generateXAxisInterval('1d', '30d', [], 1500)).toEqual('auto');
    expect(generateXAxisInterval('1d', '30d', dataX, 0)).toEqual('auto');
    expect(generateXAxisInterval('1d', '30d', dataX, 980)).toEqual(1);
    expect(generateXAxisInterval('1d', '30d', dataX, 680)).toEqual(2);
    expect(generateXAxisInterval('1d', '24h', dataX, 1500)).toEqual(1);
    expect(generateXAxisInterval('1d', '7d', dataX, 1500)).toEqual('auto');
    expect(generateXAxisInterval('1d', '7d', dataX1, 1500)).toEqual(2);
    expect(generateXAxisInterval('1d', '14d', dataX, 1500)).toEqual('auto');
    expect(generateXAxisInterval('1d', '14d', dataX1, 1500)).toEqual(2);
    expect(generateXAxisInterval('1d', '30d', dataX2, 1500)).toEqual(1);
    expect(generateXAxisInterval('1d', '30d', dataX3, 1500)).toEqual(4);
    expect(generateXAxisInterval('1d', '90d', dataX3, 1500)).toEqual(3);
    expect(generateXAxisInterval('1d', '180d', dataX3, 1500)).toEqual(3);
    expect(generateXAxisInterval('1d', '60d', dataX3, 1500)).toEqual(3);
  });

  test('generateMinMaxChartData should works correctly', () => {
    expect(generateMinMaxChartData(20, 100, 0, 5, '14d')).toEqual({
      min: 16,
      max: 101,
    });
    expect(generateMinMaxChartData(15.7, 205.4, 0, 5, '24h')).toEqual({
      min: 15,
      max: 206,
    });
    expect(generateMinMaxChartData(15.7578, 505.4974, 100, 5, '30d', 2)).toEqual({
      min: 15.4,
      max: 505.5,
    });
  });

  test('getMinMax should works correctly', () => {
    expect(getMinMax([82, 70, 93, 28, 37, 28])).toEqual([28, 93]);
    expect(getMinMax([-40, -67, -62, -78, -80, -36])).toEqual([-80, -36]);
  });

  test('toPlainString should works correctly', () => {
    expect(toPlainString(10e8)).toEqual('1000000000');
    expect(toPlainString(150)).toEqual('150');
    expect(toPlainString(5.8e-9)).toEqual('0.0000000058');
  });

  test('transformLineChartData should works correctly', () => {
    const data = [
      {
        label: '1676231977',
        value: 22,
      },
      {
        label: '1676232126',
        value: 52,
      },
      {
        label: '1676232184',
        value: 58,
      },
    ];
    const data1 = [
      {
        label: '1676231977000',
        value: 22,
      },
      {
        label: '1676232126000',
        value: 52,
      },
      {
        label: '1676232184000',
        value: 58,
      },
    ];
    const data2 = [
      {
        label: '1676231977',
        value: 292,
      },
      {
        label: '1676232126',
        value: 572,
      },
      {
        label: '1676232184',
        value: 458,
      },
    ];
    const data3 = [
      {
        label: '1676231977000',
        value: 292,
      },
      {
        label: '1676232126000',
        value: 572,
      },
      {
        label: '1676232184000',
        value: 458,
      },
    ];
    expect(transformLineChartData(data as TChartResponseItem[], '30d')).toEqual({
      dataX: [
        new Date(1676231977000).toLocaleString(),
        new Date(1676232126000).toLocaleString(),
        new Date(1676232184000).toLocaleString(),
      ],
      dataY: [22, 52, 58],
    });
    expect(transformLineChartData(data as TChartResponseItem[], '30d', true, 10)).toEqual({
      dataX: [
        new Date(1676231977000).toLocaleString(),
        new Date(1676232126000).toLocaleString(),
        new Date(1676232184000).toLocaleString(),
      ],
      dataY: [2.2, 5.2, 5.8],
    });
    expect(transformLineChartData(data2 as TChartResponseItem[], '30d', true, 10000, 3)).toEqual({
      dataX: [
        new Date(1676231977000).toLocaleString(),
        new Date(1676232126000).toLocaleString(),
        new Date(1676232184000).toLocaleString(),
      ],
      dataY: [0.029, 0.057, 0.046],
    });
    expect(transformLineChartData(data1 as TChartResponseItem[], '30d', false)).toEqual({
      dataX: [
        new Date(1676231977000).toLocaleString(),
        new Date(1676232126000).toLocaleString(),
        new Date(1676232184000).toLocaleString(),
      ],
      dataY: [22, 52, 58],
    });
    expect(transformLineChartData(data1 as TChartResponseItem[], '30d', false, 10)).toEqual({
      dataX: [
        new Date(1676231977000).toLocaleString(),
        new Date(1676232126000).toLocaleString(),
        new Date(1676232184000).toLocaleString(),
      ],
      dataY: [2.2, 5.2, 5.8],
    });
    expect(transformLineChartData(data3 as TChartResponseItem[], '30d', false, 10000, 3)).toEqual({
      dataX: [
        new Date(1676231977000).toLocaleString(),
        new Date(1676232126000).toLocaleString(),
        new Date(1676232184000).toLocaleString(),
      ],
      dataY: [0.029, 0.057, 0.046],
    });
  });

  test('generateXAxisIntervalForScatterChart should works correctly', () => {
    const dataX = [];
    for (let i = 1; i <= 50; i += 1) {
      dataX.push(`Mon Feb ${i} 2023 03:01:09 GMT+0700`);
    }
    expect(generateXAxisIntervalForScatterChart('1d', dataX, 0)).toEqual('auto');
    expect(generateXAxisIntervalForScatterChart(undefined, dataX, 1500)).toEqual('auto');
    expect(generateXAxisIntervalForScatterChart('1d', undefined, 1500)).toEqual('auto');
    expect(generateXAxisIntervalForScatterChart('1d', dataX, 1500)).toEqual(3);
    expect(generateXAxisIntervalForScatterChart('1d', dataX, 1100)).toEqual(10);
    expect(generateXAxisIntervalForScatterChart('1d', dataX, 680)).toEqual(16);
  });

  test('getFractionDigits should works correctly', () => {
    expect(getFractionDigits(10, 20, 6)).toEqual(0);
    expect(getFractionDigits(5, 185, 6)).toEqual(0);
    expect(getFractionDigits(15, 20, 6)).toEqual(1);
  });

  test('getYAxisLabel should works correctly', () => {
    expect(getYAxisLabel(15, 10, 20, 6)).toEqual('15');
    expect(getYAxisLabel(0.007, 0.005, 0.058, 6)).toEqual('0.007');
    expect(getYAxisLabel(548200, 251000, 854000)).toEqual('548K');
    expect(getYAxisLabel(7950000, 7560000, 8750000)).toEqual('8.0M');
    expect(getYAxisLabel(5120000000, 4580000000, 5680000000)).toEqual('5.1B');
  });

  test('transformFingerprintsData should works correctly', () => {
    expect(
      transformFingerprintsData([
        -0.024392, 0.012459, -0.029427, 0.033288, 0.025697, -0.002107, -0.012815, 0.004402,
        0.030594, -0.006129, -0.028222, 0.005473, -0.004335, -0.015226, -0.003936, -0.047191,
        0.022395, 0.041891, -0.022697, -0.020362, -0.007049, -0.025792, 0.021583, -0.029474,
        -0.054741, 0.007323, 0.001089, 0.032096, -0.046106, -0.028466, 0.008604, -0.03096, 0.042567,
        -0.005522, -0.022776, -0.00097, 0.001387, -0.030727, -0.008049, 0.041485, 0.00399,
        -0.036055, -0.017896, 0.044104, 0.020655, 0.013336, 0.059671, -0.014207, 0.021652,
        -0.062268, -0.026552, -0.008227, -0.060326, -0.042992, 0.041185, -0.03514, 0.029312,
        0.010427, -0.087355, 0.009182, -0.025406, 0.008749, -0.040783, 0.03827, 0.054425, -0.01745,
        -0.026855, 0.042513, 0.005054, 0.028018, 0.021949, 0.033566, 0.019637, 0.031892, -0.040491,
        -0.01943, -0.028834, 0.018427, -0.018492, 0.006274, 0.014943, -0.00198, -0.044283, 0.021326,
        0.02123, -0.018012, 0.000473, 0.004624, -0.007286, -0.005334, -0.001881, -0.008512,
        -0.003578, -0.010168, 0.003782, -0.000614, 0.007789, -0.007955, -0.013061, 0.024339,
        -0.007147, 0.055232, 0.011474, -0.00404, 0.029157, 0.010502, -0.016859, 0.005353, 0.007468,
        -0.004805, -0.001038, -0.032782, 0.066853, 0.005242, -0.011969, 0.036374, -0.054683,
        -0.00757, -0.010635, -0.015995, -0.023875, 0.015803, -0.044702, 0.000867, 0.021213,
        0.013359, -0.028067, 0.004611, -0.023031, -0.008434, -0.021919, -0.000209, -0.026841,
        0.035246, 0.008706, -0.006422, 0.026935, 0.036913, 0.042672, 0.014136, 0.040232, -0.022193,
        -0.026531, -0.023244, -0.032096, -0.055417, 0.024048, 0.018213, -0.00515, 0.028837,
        -0.00425, -0.024425, 0.003696, -0.026446, 0.019545, -0.012207, 0.021092, 0.023146, 0.007049,
        -0.000785, -0.014152, -0.008386, 0.026422, -0.003899, -0.006852, 0.031974, 0.013692,
        0.032478, -0.036606, 0.010718, -0.017482, -0.012939, 0.026474, -0.038826, -0.002758,
        0.003875, 0.035152, -0.01972, -0.030348, 0.018393, 0.01097, 0.007963, 0.00026, 0.036896,
        -0.000279, 0.030961, 0.003562, -0.034068, 0.022257, -0.018518, -0.065675, 0.001042,
        -0.004965, -0.030453, -0.00668, -0.001306, 0.017753, 0.02785, 0.009383, 0.002351, 0.026114,
        -0.023993, 0.01213, -0.027112, -0.012897, -0.077424, 0.000324, -0.011484, -0.016624,
        0.023803, 0.006256, 0.027296, 0.016891, -0.007455, -0.016388, -0.042203, -0.069811,
        -0.001717, 0.004206, -0.00769, 0.024767, 0.00808, 0.014163, 0.05336, 0.04655, 0.030501,
        0.034958, -0.047404, 0.024481, -0.047129, -0.029543, -0.016147, -0.013351, 0.009675,
        -0.000297, -0.017315, -0.041718, -0.007402, 0.010322, 0.021753, 0.023911, 0.046527,
        0.027414, 0.047163, 0.009034, 0.012415, -0.01086, -0.040431, 0.024356, 0.031193, 0.016352,
        0.029785, 0.01719, 0.011867, 0.013423, 0.014753, -0.002438, -0.02055, -0.00439, 0.049296,
        0.01062, 0.008951, 0.046044, -0.003852, 0.013979, -0.007227, 0.014785, -0.025523, -0.039794,
        0.023724, -0.030631, 0.013205, -0.00172, 0.008024, 0.022545, -0.045887, 0.013515, -0.009718,
        0.009564, 0.009237, 0.000537, 0.00232, 0.000421, 0.030508, 0.043681, -0.003445, 0.063015,
        0.013153, 0.004204, -0.016314, 0.015682, -0.003316, 0.008879, 0.009182, -0.004491, -0.01019,
        -0.041799, 0.044227, -0.015986, -0.00232, -0.016126, -0.001066, 0.00191, 0.005573, 0.07185,
        0.018163, -0.010851, 0.015725, 0.006495, -0.023807, 0.052439, 0.036737, 0.045115, -0.029296,
        -0.008353, -0.030207, 0.001702, -0.010541, -0.034798, 0.002596, -0.000155, -0.012259,
        0.031802, 0.020742, -0.006687, -0.00864, 0.041176, -0.025882, 0.004809, 0.005147, -0.002083,
        -0.022198, 0.041758, 0.012257, -0.001729, 0.041352, -0.005861, 0.002085, 0.02156, -0.044344,
        -0.015487, 0.003988, 0.015544, 0.010858, 0.002757, 0.016314, 0.028945, -0.018272, 0.039012,
        -0.002807, -0.017693, -0.00596, 0.036351, -0.022816, -0.000494, 0.048228, -0.041729,
        -0.016966, -0.078496, -0.026194, -0.045733, -0.01498, 0.005783, -0.001786, -0.045546,
        -0.021275, -0.017994, -0.018597, -0.000997, -0.033508, -0.029118, -0.020845, 0.000596,
        0.013209, -0.013705, 0.001908, 0.022781, 0.016869, 0.01533, 0.01584, 0.014916, 0.039484,
        -0.028489, -0.004129, 0.032129, 0.009445, 0.034052, 0.022386, -0.015317, -0.012058,
        0.019301, 0.007148, 0.023068, -0.023453, 0.022398, 0.009833, -0.002486, 0.023291, -0.057693,
        0.019467, 0.011457, 0.02525, 0.014506, -0.005569, 0.023633, 0.021024, -0.026017, -0.03208,
        -0.01815, -0.005865, 0.024119, -0.022485, 0.015072, 0.009128, 0.02504, -0.00714, 0.017463,
        0.035071, 0.038089, 0.037315, -0.008476, -0.001075, 0.029684, -0.03498, 0.031249, -0.02717,
        0.027684, 0.00398, -0.028778, -0.006914, -0.013995, -0.030517, -0.008379, -0.033797,
        0.009944, -0.027071, -0.029641, -0.005121, 0.020171, -0.029872, -0.046743, 0.047157,
        0.009732, 0.034186, -0.006811, 0.020242, -0.048425, 0.017305, 0.027799, 0.012341, 0.015989,
        -0.026489, 0.013225, -0.017273, 0.019225, -0.020475, -0.011176, 0.010854, -0.010087,
        0.03722, 0.014534, -0.000573, 0.004037, -0.01758, -0.023838, 0.01563, 0.029624, 0.014883,
        -0.030709, 0.042181, -0.033333, 0.01187, 0.0512, 0.023582, -0.009648, 0.014897, 0.031819,
        0.024989, 0.017644, -0.019769, 0.006875, 0.025619, 0.009894, -0.010548, 0.010024, -0.017476,
        0.00021, -0.017679, 0.055611, 0.002326, -0.01783, -0.001413, -0.006798, -0.023288, 0.046277,
        0.057043, -0.000899, 0.010898, 0.016206, 0.009349, -0.028692, -0.027279, -0.038252,
        0.015849, 0.044002, -0.001334, 0.015101, -0.038434, -0.031911, 0.012237, -0.022157,
        -0.013213, -0.007553, 0.009214, -0.061758, -0.005342, 0.018981, 0.044778, 0.050471,
        -0.043149, 0.019813, -0.001057, 0.015432, 0.010404, 0.005869, 0.050415, -0.001618,
        -0.003272, 0.01484, -0.007961, -0.022926, -0.023227, 0.031532, 0.039731, 0.029854, 0.003134,
        -0.017799, 0.014725, -0.010217, 0.027601, -0.002478, -0.020784, -0.006867, -0.042665,
        0.002489, -0.018678, -0.002427, -0.008925, 0.034873, 0.016714, 0.017978, 0.035935,
        -0.006148, -0.029282, -0.017356, 0.018715, -0.036968, -0.009649, 0.013285, -0.011138,
        0.000728, -0.035107, -0.014456, -0.040528, 0.006904, 0.015622, 0.000699, -0.016652,
        0.014509, 0.03451, -0.019448, 0.014313, 0.000065, -0.046469, 0.031369, 0.003034, 0.01222,
        -0.046097, 0.009032, 0.028166, 0.043801, -0.023349, -0.017918, 0.011867, -0.028235,
        0.042982, 0.019759, -0.009471, -0.018795, 0.00915, -0.010149, 0.07289, 0.022488, 0.032434,
        0.004262, -0.006141, 0.000046, -0.014025, 0.019103, -0.014846, -0.012086, 0.015193,
        -0.004219, -0.041403, 0.005406, 0.003681, 0.01624, -0.011355, 0.005868, 0.023981, -0.008683,
        0.018892, -0.00758, 0.007376, 0.004933, -0.03183, 0.008402, -0.015207, -0.006158, -0.026369,
        0.023343, -0.018474, 0.030244, 0.006127, -0.017497, 0.009127, 0.018648, -0.018711, 0.03214,
        0.039147, 0.029139, -0.0117, -0.037276, -0.005785, -0.013038, -0.00473, -0.017009, 0.001011,
        0.037921, -0.031396, -0.000478, -0.012916, -0.004133, -0.014457, 0.009053, -0.03176,
        -0.014727, 0.016276, -0.00774, -0.008285, -0.01438, 0.044578, 0.016986, 0.040468, -0.00652,
        -0.026948, -0.000996, 0.015417, -0.012457, 0.028496, -0.040356, 0.016642, -0.043094,
        -0.030284, 0.036371, -0.019134, -0.014086, -0.032232, 0.025864, 0.016357, -0.04566, 0.00631,
        0.007199, 0.024321, -0.043975, 0.002094, -0.054145, -0.010158, -0.044904, 0.021159,
        0.036293, 0.00848, -0.005992, -0.009546, 0.039248, -0.027269, -0.013286, -0.010974,
        0.023554, 0.030984, -0.024148, 0.009184, 0.013888, -0.03782, -0.039082, -0.007293, -0.00637,
        -0.029296, -0.06346, 0.035244, -0.025179, 0.042673, 0.012529, 0.047062, 0.000348, 0.078748,
        -0.048428, 0.036773, -0.001608, -0.013783, 0.039651, -0.01058, 0.062988, -0.024475,
        0.008126, -0.013117, -0.016171, -0.029678, 0.030124, 0.004856, -0.008485, 0.028764,
        0.000483, -0.025232, -0.061263, -0.011841, -0.007815, 0.008288, -0.020903, 0.011027,
        -0.034249, 0.019953, 0.000082, -0.006689, -0.005136, 0.027133, -0.013026, 0.03282,
        -0.009685, -0.012206, -0.002207, -0.065766, 0.025542, 0.049264, 0.013925, 0.0054, 0.009404,
        0.007202, 0.002493, 0.024246, -0.007109, -0.001847, 0.002885, -0.013322, -0.01139, 0.006528,
        0.045701, -0.047304, -0.031236, 0.003138, 0.015268, -0.019583, 0.004699, 0.00865, -0.004051,
        0.008475, 0.004923, 0.00476, -0.019364, 0.018211, -0.021051, -0.012581, -0.021057, 0.023677,
        0.01028, 0.021383, 0.037907, 0.024928, 0.012586, -0.031719, 0.021283, 0.033637, -0.015441,
        -0.002931, -0.019131, 0.01644, -0.003083, -0.009551, 0.020755, -0.026262, 0.012262,
        -0.018427, 0.022081, -0.009037, 0.016739, 0.030933, 0.018048, -0.052763, 0.000541,
        -0.038859, 0.003278, 0.001213, -0.028869, 0.047235, -0.038911, -0.036125, -0.048068,
        -0.012918, 0.002989, -0.02099, -0.010884, 0.040254, -0.001666, -0.002359, -0.004717,
        -0.023109, 0.007721, -0.02251, 0.024295, 0.026892, 0.006789, -0.04765, -0.012861, -0.023547,
        -0.006124, -0.009561, 0.014249, -0.022258, 0.026985, 0.006956, 0.017947, 0.004906, 0.034368,
        -0.032014, 0.033936, -0.042665, 0.001551, 0.014776, -0.024573, 0.018453, -0.021751,
        0.052607, -0.012439, -0.023873, 0.003009, -0.014554, 0.044779, -0.011781, -0.007231,
        -0.00218, 0.00064, 0.007805, 0.047071, 0.00585, -0.003453, -0.005817, -0.009304, -0.009228,
        0.010601, -0.040959, 0.009442, 0.024389, 0.038322, 0.037431, 0.002229, -0.010035, -0.02581,
        0.01328, 0, 0.004299, 0.009783, 0.0065, 0.029096, -0.008824, -0.020921, -0.026457, 0.000708,
        0.010224, -0.073393, -0.059671, -0.016096, -0.026433, 0.030143, 0.007305, -0.019093,
        -0.035875, -0.006415, -0.014258, -0.031968, -0.057322, 0.045795, 0.018414, -0.049117,
        0.045465, -0.039823, 0.023708, -0.033113, 0.009838, 0.012346, 0.054147, 0.013523, -0.00549,
        0.007118, 0.028609, 0.024661, -0.026071, -0.013525, -0.016586, 0.021441, -0.00499, 0.030556,
        -0.011303, 0.032426, -0.002612, -0.008686, -0.024259, 0.02501, -0.01032, -0.032149,
        0.039054, -0.007172, 0.007512, -0.018631, 0.002851, -0.022489, 0.00164, 0.033715, -0.058178,
        -0.003544, -0.028485, -0.01913, -0.02304, -0.023269, -0.014883, 0.006566, -0.024706,
        -0.000267, -0.017672, 0.032948, 0.026936, 0.00982, 0.00369, -0.050824, -0.011466, 0.011066,
        0.001999, -0.024058, -0.031525, -0.02575, 0.012039, 0.03358, 0.051232, 0.010348, 0.01435,
        -0.031156, 0.02774, 0.027566, -0.033822, -0.055192, -0.009184, -0.014272, 0.006134,
        -0.049236, -0.011066, -0.027622, -0.019685, 0.063143, 0.034395, -0.047181, 0.007247,
        0.020827, 0.0626, 0.021042, 0.072285, -0.004344, -0.003553, 0.029587, 0.055111, 0.027494,
        0.028393, -0.023096, -0.040574, 0.004254, 0.036899, -0.028808, 0.022716, 0.015175,
        -0.036503, 0.02781, 0.017316, -0.034974, 0.042543, -0.035795, -0.001096, 0.0242, 0.03277,
        -0.025536, -0.036291, 0.04702, 0.034732, 0.001543, 0.052979, 0.031109, -0.003462, 0.020889,
        0.007564, -0.016042, 0.004789, -0.011463, -0.000841, 0.011212, -0.029022, 0.004721,
        0.041243, 0.00187, 0.010079, 0.001047, 0.026028, -0.01924, 0.036011, 0.003251, -0.004313,
        0.014058, 0.024737, -0.01028, 0.002082, 0.036905, 0.00272, 0.022676, -0.003181, 0.062494,
        0.004175, -0.027082, 0.019025, 0.020899, -0.022202, -0.048355, -0.015566, 0.01333, 0.079095,
        -0.027365, -0.023365, 0.007518, -0.032892, 0.013148, 0.004362, -0.029478, -0.014349,
        0.007018, -0.034028, -0.00753, -0.000781, 0.01184, -0.011873, -0.008487, 0.039657,
        -0.025369, 0.031745, 0.027953, -0.01115, -0.027203, 0.013229, -0.01251, 0.020724, 0.012652,
        0.00049, 0.010775, 0.066278, -0.01414, -0.044729, -0.043005, 0.021829, 0.024871, -0.000551,
        -0.006506, -0.00143, 0.003595, -0.004011, 0.017613, 0.029939, 0.061863, -0.007777, 0.061214,
        0.003571, -0.017041, 0.008136, -0.013247, 0.022393, 0.012297, -0.021787, -0.05542, 0.038087,
        0.015655, -0.032548, -0.03864, -0.024044, -0.022006, 0.015341, 0.009405, 0.022728, 0.032276,
        -0.040226, -0.032215, -0.024191, -0.009368, 0.001169, -0.032066, -0.006632, 0.033828,
        0.037063, -0.017344, -0.035653, -0.005906, -0.01523, -0.039295, 0.030393, -0.026169,
        0.036962, -0.009788, -0.045567, 0.000871, -0.02093, 0.022788, 0.053093, 0.02655, -0.035213,
        0.044878, -0.018628, 0.004728, 0.016219, 0.045104, 0.022266, 0.005279, 0.016477, -0.009587,
        0.026597, 0.001787, -0.003036, -0.011097, -0.031761, -0.017763, 0.020884, 0.030994,
        -0.010992, 0.001055, -0.025104, -0.04716, 0.009575, 0.012306, 0.048501, 0.010439, -0.003682,
        0.008651, -0.015781, 0.009107, -0.020465, -0.009562, -0.005514, -0.021611, -0.030036,
        0.018783, -0.032787, 0.019929, -0.0386, 0.021715, 0.002274, 0.029657, -0.023415, -0.003983,
        0.00929, 0.001254, -0.004107, -0.002161, -0.01857, -0.009436, 0.050517, -0.025089, 0.022098,
        0.010094, -0.019943, -0.015515, -0.006078, 0.038123, -0.025613, 0.008093, 0.018319,
        -0.025581, -0.009638, -0.020275, 0.01138, -0.011644, -0.023941, 0.035062, -0.015909,
        0.016911, 0.008452, -0.002658, -0.012234, -0.002533, -0.039314, 0.006608, 0.062817, 0.00015,
        0.040086, -0.022494, -0.009378, -0.00072, 0.025243, -0.014975, 0.047924, -0.053977,
        -0.009889, -0.034451, -0.022571, 0.004139, 0.025713, 0.032715, 0.017686, 0.046426, 0.050591,
        -0.009717, -0.016894, -0.014033, 0.016474, -0.035365, -0.002872, 0.001622, -0.051722,
        0.024656, -0.008716, -0.026442, 0.05284, 0.027472, 0.031793, -0.02307, -0.001817, -0.023982,
        -0.022829, 0.021653, -0.042671, -0.00091, -0.023073, 0.040871, 0.048994, -0.021917,
        -0.011836, -0.005506, 0.008329, 0.007641, -0.008463, 0.009057, -0.014091, -0.016683,
        -0.00131, 0.012465, 0.038342, 0.019988, 0.002751, 0.028869, 0.001215, 0.027861, 0.009715,
        0.001574, 0.010041, -0.001389, -0.01838, -0.013587, -0.004276, -0.040852, 0.052869,
        -0.005045, 0.032966, -0.013057, -0.000355, -0.024964, -0.023001, 0.035097, 0.009403,
        0.028281, -0.012302, -0.015468, 0.034815, 0.037438, -0.017408, -0.037407, -0.036414,
        -0.029964, -0.011369, 0.007598, -0.050303, -0.005081, 0.017978, 0.00933, 0.012685, 0.014534,
        -0.010319, 0.001941, -0.003691, 0.021461, -0.001583, -0.032296, 0.041021, 0.012336,
        -0.011474, 0.05716, 0.034921, 0.010443, -0.006422, 0.013592, -0.018142, -0.026166, 0.012238,
        -0.020432, -0.001362, -0.012939, -0.008818, -0.000341, -0.010722, 0.00269, -0.021839,
        0.025611, 0.05346, 0.060858, -0.029581, 0.029805, -0.016969, -0.015217, -0.061829, 0.022841,
        -0.006714, -0.014091, 0.005816, 0.07048, -0.062303, 0.020736, 0.035089, -0.023782, 0.009522,
        -0.014763, 0.022968, -0.002692, 0.027873, 0.003288, 0.004815, -0.024683, 0.031997,
        -0.050776, -0.023888, -0.017117, -0.005457, 0.002265, -0.016807, 0.009306, -0.029977,
        0.010778, -0.007594, -0.002572, 0.027825, 0.030029, 0.006765, -0.022948, 0.014952, -0.01723,
        0.012086, -0.012164, -0.055017, 0.004474, 0.000508, 0.029984, 0.011175, 0.00536, 0.014699,
        0.019425, 0.022063, -0.009542, 0.024598, 0.009955, -0.02525, -0.017274, -0.004072, 0.012371,
        0.035233, 0.002708, -0.042543, -0.017979, 0.002637, 0.003209, 0.039836, -0.006357,
        -0.025873, 0.022545, 0.054849, 0.012649, -0.02895, 0.001714, 0.0011, -0.001516, 0.029252,
        -0.013025, 0.013811, 0.024876, 0.014881, -0.022117, 0.009276, 0.026584, 0.022238, -0.015899,
        -0.010427, 0.01014, 0.025553, -0.007118, -0.041452, 0.037888, -0.037366, -0.006657,
        -0.027018, -0.033696, -0.006414, -0.033922, -0.007185, 0.025747, 0.029429, -0.008878,
        0.02989, 0.000645, -0.000415, 0.008928, -0.004237, -0.01069, 0.009136, 0.032396, -0.003809,
        -0.002385, 0.027653, 0.020999, -0.041986, 0.015697, 0.010705, -0.001115, -0.010233,
        0.037436, 0.017715, 0.056612, -0.024973, -0.01272, 0.000543, -0.019448, -0.024627, 0.026919,
        0.009987, 0.011029, 0.063534, -0.040781, -0.000773, -0.028158, -0.005336, -0.001825,
        0.008335, 0.052049, 0.012607, -0.01938, -0.003161, -0.013101, 0.024902, -0.016957, 0.025663,
        0.022466, 0.020302, -0.008921, -0.00274, -0.006724, 0.005448, 0.054983, 0.010263, 0.01558,
        0.014594, 0.016081, -0.058497, -0.003062, -0.023772, 0.009911, -0.009204, 0.043679,
        0.005047, 0.017614, -0.00034, -0.01652, -0.012825, 0.062535, 0.014563, -0.021215, 0.003754,
        -0.079937, 0.009097, -0.038201, 0.004427, -0.034692, -0.00711, 0.019624, 0.054748,
      ]),
    ).toEqual({
      seriesData: [
        [0, 0, -0.024392],
        [0, 1, 0.012459],
        [0, 2, -0.029427],
        [0, 3, 0.033288],
        [0, 4, 0.025697],
        [0, 5, -0.002107],
        [0, 6, -0.012815],
        [0, 7, 0.004402],
        [0, 8, 0.030594],
        [0, 9, -0.006129],
        [0, 10, -0.028222],
        [0, 11, 0.005473],
        [0, 12, -0.004335],
        [0, 13, -0.015226],
        [0, 14, -0.003936],
        [0, 15, -0.047191],
        [0, 16, 0.022395],
        [0, 17, 0.041891],
        [0, 18, -0.022697],
        [0, 19, -0.020362],
        [0, 20, -0.007049],
        [0, 21, -0.025792],
        [0, 22, 0.021583],
        [0, 23, -0.029474],
        [0, 24, -0.054741],
        [0, 25, 0.007323],
        [0, 26, 0.001089],
        [0, 27, 0.032096],
        [0, 28, -0.046106],
        [0, 29, -0.028466],
        [0, 30, 0.008604],
        [0, 31, -0.03096],
        [0, 32, 0.042567],
        [0, 33, -0.005522],
        [0, 34, -0.022776],
        [0, 35, -0.00097],
        [0, 36, 0.001387],
        [0, 37, -0.030727],
        [1, 0, -0.008049],
        [1, 1, 0.041485],
        [1, 2, 0.00399],
        [1, 3, -0.036055],
        [1, 4, -0.017896],
        [1, 5, 0.044104],
        [1, 6, 0.020655],
        [1, 7, 0.013336],
        [1, 8, 0.059671],
        [1, 9, -0.014207],
        [1, 10, 0.021652],
        [1, 11, -0.062268],
        [1, 12, -0.026552],
        [1, 13, -0.008227],
        [1, 14, -0.060326],
        [1, 15, -0.042992],
        [1, 16, 0.041185],
        [1, 17, -0.03514],
        [1, 18, 0.029312],
        [1, 19, 0.010427],
        [1, 20, -0.087355],
        [1, 21, 0.009182],
        [1, 22, -0.025406],
        [1, 23, 0.008749],
        [1, 24, -0.040783],
        [1, 25, 0.03827],
        [1, 26, 0.054425],
        [1, 27, -0.01745],
        [1, 28, -0.026855],
        [1, 29, 0.042513],
        [1, 30, 0.005054],
        [1, 31, 0.028018],
        [1, 32, 0.021949],
        [1, 33, 0.033566],
        [1, 34, 0.019637],
        [1, 35, 0.031892],
        [1, 36, -0.040491],
        [1, 37, -0.01943],
        [2, 0, -0.028834],
        [2, 1, 0.018427],
        [2, 2, -0.018492],
        [2, 3, 0.006274],
        [2, 4, 0.014943],
        [2, 5, -0.00198],
        [2, 6, -0.044283],
        [2, 7, 0.021326],
        [2, 8, 0.02123],
        [2, 9, -0.018012],
        [2, 10, 0.000473],
        [2, 11, 0.004624],
        [2, 12, -0.007286],
        [2, 13, -0.005334],
        [2, 14, -0.001881],
        [2, 15, -0.008512],
        [2, 16, -0.003578],
        [2, 17, -0.010168],
        [2, 18, 0.003782],
        [2, 19, -0.000614],
        [2, 20, 0.007789],
        [2, 21, -0.007955],
        [2, 22, -0.013061],
        [2, 23, 0.024339],
        [2, 24, -0.007147],
        [2, 25, 0.055232],
        [2, 26, 0.011474],
        [2, 27, -0.00404],
        [2, 28, 0.029157],
        [2, 29, 0.010502],
        [2, 30, -0.016859],
        [2, 31, 0.005353],
        [2, 32, 0.007468],
        [2, 33, -0.004805],
        [2, 34, -0.001038],
        [2, 35, -0.032782],
        [2, 36, 0.066853],
        [2, 37, 0.005242],
        [3, 0, -0.011969],
        [3, 1, 0.036374],
        [3, 2, -0.054683],
        [3, 3, -0.00757],
        [3, 4, -0.010635],
        [3, 5, -0.015995],
        [3, 6, -0.023875],
        [3, 7, 0.015803],
        [3, 8, -0.044702],
        [3, 9, 0.000867],
        [3, 10, 0.021213],
        [3, 11, 0.013359],
        [3, 12, -0.028067],
        [3, 13, 0.004611],
        [3, 14, -0.023031],
        [3, 15, -0.008434],
        [3, 16, -0.021919],
        [3, 17, -0.000209],
        [3, 18, -0.026841],
        [3, 19, 0.035246],
        [3, 20, 0.008706],
        [3, 21, -0.006422],
        [3, 22, 0.026935],
        [3, 23, 0.036913],
        [3, 24, 0.042672],
        [3, 25, 0.014136],
        [3, 26, 0.040232],
        [3, 27, -0.022193],
        [3, 28, -0.026531],
        [3, 29, -0.023244],
        [3, 30, -0.032096],
        [3, 31, -0.055417],
        [3, 32, 0.024048],
        [3, 33, 0.018213],
        [3, 34, -0.00515],
        [3, 35, 0.028837],
        [3, 36, -0.00425],
        [3, 37, -0.024425],
        [4, 0, 0.003696],
        [4, 1, -0.026446],
        [4, 2, 0.019545],
        [4, 3, -0.012207],
        [4, 4, 0.021092],
        [4, 5, 0.023146],
        [4, 6, 0.007049],
        [4, 7, -0.000785],
        [4, 8, -0.014152],
        [4, 9, -0.008386],
        [4, 10, 0.026422],
        [4, 11, -0.003899],
        [4, 12, -0.006852],
        [4, 13, 0.031974],
        [4, 14, 0.013692],
        [4, 15, 0.032478],
        [4, 16, -0.036606],
        [4, 17, 0.010718],
        [4, 18, -0.017482],
        [4, 19, -0.012939],
        [4, 20, 0.026474],
        [4, 21, -0.038826],
        [4, 22, -0.002758],
        [4, 23, 0.003875],
        [4, 24, 0.035152],
        [4, 25, -0.01972],
        [4, 26, -0.030348],
        [4, 27, 0.018393],
        [4, 28, 0.01097],
        [4, 29, 0.007963],
        [4, 30, 0.00026],
        [4, 31, 0.036896],
        [4, 32, -0.000279],
        [4, 33, 0.030961],
        [4, 34, 0.003562],
        [4, 35, -0.034068],
        [4, 36, 0.022257],
        [4, 37, -0.018518],
        [5, 0, -0.065675],
        [5, 1, 0.001042],
        [5, 2, -0.004965],
        [5, 3, -0.030453],
        [5, 4, -0.00668],
        [5, 5, -0.001306],
        [5, 6, 0.017753],
        [5, 7, 0.02785],
        [5, 8, 0.009383],
        [5, 9, 0.002351],
        [5, 10, 0.026114],
        [5, 11, -0.023993],
        [5, 12, 0.01213],
        [5, 13, -0.027112],
        [5, 14, -0.012897],
        [5, 15, -0.077424],
        [5, 16, 0.000324],
        [5, 17, -0.011484],
        [5, 18, -0.016624],
        [5, 19, 0.023803],
        [5, 20, 0.006256],
        [5, 21, 0.027296],
        [5, 22, 0.016891],
        [5, 23, -0.007455],
        [5, 24, -0.016388],
        [5, 25, -0.042203],
        [5, 26, -0.069811],
        [5, 27, -0.001717],
        [5, 28, 0.004206],
        [5, 29, -0.00769],
        [5, 30, 0.024767],
        [5, 31, 0.00808],
        [5, 32, 0.014163],
        [5, 33, 0.05336],
        [5, 34, 0.04655],
        [5, 35, 0.030501],
        [5, 36, 0.034958],
        [5, 37, -0.047404],
        [6, 0, 0.024481],
        [6, 1, -0.047129],
        [6, 2, -0.029543],
        [6, 3, -0.016147],
        [6, 4, -0.013351],
        [6, 5, 0.009675],
        [6, 6, -0.000297],
        [6, 7, -0.017315],
        [6, 8, -0.041718],
        [6, 9, -0.007402],
        [6, 10, 0.010322],
        [6, 11, 0.021753],
        [6, 12, 0.023911],
        [6, 13, 0.046527],
        [6, 14, 0.027414],
        [6, 15, 0.047163],
        [6, 16, 0.009034],
        [6, 17, 0.012415],
        [6, 18, -0.01086],
        [6, 19, -0.040431],
        [6, 20, 0.024356],
        [6, 21, 0.031193],
        [6, 22, 0.016352],
        [6, 23, 0.029785],
        [6, 24, 0.01719],
        [6, 25, 0.011867],
        [6, 26, 0.013423],
        [6, 27, 0.014753],
        [6, 28, -0.002438],
        [6, 29, -0.02055],
        [6, 30, -0.00439],
        [6, 31, 0.049296],
        [6, 32, 0.01062],
        [6, 33, 0.008951],
        [6, 34, 0.046044],
        [6, 35, -0.003852],
        [6, 36, 0.013979],
        [6, 37, -0.007227],
        [7, 0, 0.014785],
        [7, 1, -0.025523],
        [7, 2, -0.039794],
        [7, 3, 0.023724],
        [7, 4, -0.030631],
        [7, 5, 0.013205],
        [7, 6, -0.00172],
        [7, 7, 0.008024],
        [7, 8, 0.022545],
        [7, 9, -0.045887],
        [7, 10, 0.013515],
        [7, 11, -0.009718],
        [7, 12, 0.009564],
        [7, 13, 0.009237],
        [7, 14, 0.000537],
        [7, 15, 0.00232],
        [7, 16, 0.000421],
        [7, 17, 0.030508],
        [7, 18, 0.043681],
        [7, 19, -0.003445],
        [7, 20, 0.063015],
        [7, 21, 0.013153],
        [7, 22, 0.004204],
        [7, 23, -0.016314],
        [7, 24, 0.015682],
        [7, 25, -0.003316],
        [7, 26, 0.008879],
        [7, 27, 0.009182],
        [7, 28, -0.004491],
        [7, 29, -0.01019],
        [7, 30, -0.041799],
        [7, 31, 0.044227],
        [7, 32, -0.015986],
        [7, 33, -0.00232],
        [7, 34, -0.016126],
        [7, 35, -0.001066],
        [7, 36, 0.00191],
        [7, 37, 0.005573],
        [8, 0, 0.07185],
        [8, 1, 0.018163],
        [8, 2, -0.010851],
        [8, 3, 0.015725],
        [8, 4, 0.006495],
        [8, 5, -0.023807],
        [8, 6, 0.052439],
        [8, 7, 0.036737],
        [8, 8, 0.045115],
        [8, 9, -0.029296],
        [8, 10, -0.008353],
        [8, 11, -0.030207],
        [8, 12, 0.001702],
        [8, 13, -0.010541],
        [8, 14, -0.034798],
        [8, 15, 0.002596],
        [8, 16, -0.000155],
        [8, 17, -0.012259],
        [8, 18, 0.031802],
        [8, 19, 0.020742],
        [8, 20, -0.006687],
        [8, 21, -0.00864],
        [8, 22, 0.041176],
        [8, 23, -0.025882],
        [8, 24, 0.004809],
        [8, 25, 0.005147],
        [8, 26, -0.002083],
        [8, 27, -0.022198],
        [8, 28, 0.041758],
        [8, 29, 0.012257],
        [8, 30, -0.001729],
        [8, 31, 0.041352],
        [8, 32, -0.005861],
        [8, 33, 0.002085],
        [8, 34, 0.02156],
        [8, 35, -0.044344],
        [8, 36, -0.015487],
        [8, 37, 0.003988],
        [9, 0, 0.015544],
        [9, 1, 0.010858],
        [9, 2, 0.002757],
        [9, 3, 0.016314],
        [9, 4, 0.028945],
        [9, 5, -0.018272],
        [9, 6, 0.039012],
        [9, 7, -0.002807],
        [9, 8, -0.017693],
        [9, 9, -0.00596],
        [9, 10, 0.036351],
        [9, 11, -0.022816],
        [9, 12, -0.000494],
        [9, 13, 0.048228],
        [9, 14, -0.041729],
        [9, 15, -0.016966],
        [9, 16, -0.078496],
        [9, 17, -0.026194],
        [9, 18, -0.045733],
        [9, 19, -0.01498],
        [9, 20, 0.005783],
        [9, 21, -0.001786],
        [9, 22, -0.045546],
        [9, 23, -0.021275],
        [9, 24, -0.017994],
        [9, 25, -0.018597],
        [9, 26, -0.000997],
        [9, 27, -0.033508],
        [9, 28, -0.029118],
        [9, 29, -0.020845],
        [9, 30, 0.000596],
        [9, 31, 0.013209],
        [9, 32, -0.013705],
        [9, 33, 0.001908],
        [9, 34, 0.022781],
        [9, 35, 0.016869],
        [9, 36, 0.01533],
        [9, 37, 0.01584],
        [10, 0, 0.014916],
        [10, 1, 0.039484],
        [10, 2, -0.028489],
        [10, 3, -0.004129],
        [10, 4, 0.032129],
        [10, 5, 0.009445],
        [10, 6, 0.034052],
        [10, 7, 0.022386],
        [10, 8, -0.015317],
        [10, 9, -0.012058],
        [10, 10, 0.019301],
        [10, 11, 0.007148],
        [10, 12, 0.023068],
        [10, 13, -0.023453],
        [10, 14, 0.022398],
        [10, 15, 0.009833],
        [10, 16, -0.002486],
        [10, 17, 0.023291],
        [10, 18, -0.057693],
        [10, 19, 0.019467],
        [10, 20, 0.011457],
        [10, 21, 0.02525],
        [10, 22, 0.014506],
        [10, 23, -0.005569],
        [10, 24, 0.023633],
        [10, 25, 0.021024],
        [10, 26, -0.026017],
        [10, 27, -0.03208],
        [10, 28, -0.01815],
        [10, 29, -0.005865],
        [10, 30, 0.024119],
        [10, 31, -0.022485],
        [10, 32, 0.015072],
        [10, 33, 0.009128],
        [10, 34, 0.02504],
        [10, 35, -0.00714],
        [10, 36, 0.017463],
        [10, 37, 0.035071],
        [11, 0, 0.038089],
        [11, 1, 0.037315],
        [11, 2, -0.008476],
        [11, 3, -0.001075],
        [11, 4, 0.029684],
        [11, 5, -0.03498],
        [11, 6, 0.031249],
        [11, 7, -0.02717],
        [11, 8, 0.027684],
        [11, 9, 0.00398],
        [11, 10, -0.028778],
        [11, 11, -0.006914],
        [11, 12, -0.013995],
        [11, 13, -0.030517],
        [11, 14, -0.008379],
        [11, 15, -0.033797],
        [11, 16, 0.009944],
        [11, 17, -0.027071],
        [11, 18, -0.029641],
        [11, 19, -0.005121],
        [11, 20, 0.020171],
        [11, 21, -0.029872],
        [11, 22, -0.046743],
        [11, 23, 0.047157],
        [11, 24, 0.009732],
        [11, 25, 0.034186],
        [11, 26, -0.006811],
        [11, 27, 0.020242],
        [11, 28, -0.048425],
        [11, 29, 0.017305],
        [11, 30, 0.027799],
        [11, 31, 0.012341],
        [11, 32, 0.015989],
        [11, 33, -0.026489],
        [11, 34, 0.013225],
        [11, 35, -0.017273],
        [11, 36, 0.019225],
        [11, 37, -0.020475],
        [12, 0, -0.011176],
        [12, 1, 0.010854],
        [12, 2, -0.010087],
        [12, 3, 0.03722],
        [12, 4, 0.014534],
        [12, 5, -0.000573],
        [12, 6, 0.004037],
        [12, 7, -0.01758],
        [12, 8, -0.023838],
        [12, 9, 0.01563],
        [12, 10, 0.029624],
        [12, 11, 0.014883],
        [12, 12, -0.030709],
        [12, 13, 0.042181],
        [12, 14, -0.033333],
        [12, 15, 0.01187],
        [12, 16, 0.0512],
        [12, 17, 0.023582],
        [12, 18, -0.009648],
        [12, 19, 0.014897],
        [12, 20, 0.031819],
        [12, 21, 0.024989],
        [12, 22, 0.017644],
        [12, 23, -0.019769],
        [12, 24, 0.006875],
        [12, 25, 0.025619],
        [12, 26, 0.009894],
        [12, 27, -0.010548],
        [12, 28, 0.010024],
        [12, 29, -0.017476],
        [12, 30, 0.00021],
        [12, 31, -0.017679],
        [12, 32, 0.055611],
        [12, 33, 0.002326],
        [12, 34, -0.01783],
        [12, 35, -0.001413],
        [12, 36, -0.006798],
        [12, 37, -0.023288],
        [13, 0, 0.046277],
        [13, 1, 0.057043],
        [13, 2, -0.000899],
        [13, 3, 0.010898],
        [13, 4, 0.016206],
        [13, 5, 0.009349],
        [13, 6, -0.028692],
        [13, 7, -0.027279],
        [13, 8, -0.038252],
        [13, 9, 0.015849],
        [13, 10, 0.044002],
        [13, 11, -0.001334],
        [13, 12, 0.015101],
        [13, 13, -0.038434],
        [13, 14, -0.031911],
        [13, 15, 0.012237],
        [13, 16, -0.022157],
        [13, 17, -0.013213],
        [13, 18, -0.007553],
        [13, 19, 0.009214],
        [13, 20, -0.061758],
        [13, 21, -0.005342],
        [13, 22, 0.018981],
        [13, 23, 0.044778],
        [13, 24, 0.050471],
        [13, 25, -0.043149],
        [13, 26, 0.019813],
        [13, 27, -0.001057],
        [13, 28, 0.015432],
        [13, 29, 0.010404],
        [13, 30, 0.005869],
        [13, 31, 0.050415],
        [13, 32, -0.001618],
        [13, 33, -0.003272],
        [13, 34, 0.01484],
        [13, 35, -0.007961],
        [13, 36, -0.022926],
        [13, 37, -0.023227],
        [14, 0, 0.031532],
        [14, 1, 0.039731],
        [14, 2, 0.029854],
        [14, 3, 0.003134],
        [14, 4, -0.017799],
        [14, 5, 0.014725],
        [14, 6, -0.010217],
        [14, 7, 0.027601],
        [14, 8, -0.002478],
        [14, 9, -0.020784],
        [14, 10, -0.006867],
        [14, 11, -0.042665],
        [14, 12, 0.002489],
        [14, 13, -0.018678],
        [14, 14, -0.002427],
        [14, 15, -0.008925],
        [14, 16, 0.034873],
        [14, 17, 0.016714],
        [14, 18, 0.017978],
        [14, 19, 0.035935],
        [14, 20, -0.006148],
        [14, 21, -0.029282],
        [14, 22, -0.017356],
        [14, 23, 0.018715],
        [14, 24, -0.036968],
        [14, 25, -0.009649],
        [14, 26, 0.013285],
        [14, 27, -0.011138],
        [14, 28, 0.000728],
        [14, 29, -0.035107],
        [14, 30, -0.014456],
        [14, 31, -0.040528],
        [14, 32, 0.006904],
        [14, 33, 0.015622],
        [14, 34, 0.000699],
        [14, 35, -0.016652],
        [14, 36, 0.014509],
        [14, 37, 0.03451],
        [15, 0, -0.019448],
        [15, 1, 0.014313],
        [15, 2, 0.000065],
        [15, 3, -0.046469],
        [15, 4, 0.031369],
        [15, 5, 0.003034],
        [15, 6, 0.01222],
        [15, 7, -0.046097],
        [15, 8, 0.009032],
        [15, 9, 0.028166],
        [15, 10, 0.043801],
        [15, 11, -0.023349],
        [15, 12, -0.017918],
        [15, 13, 0.011867],
        [15, 14, -0.028235],
        [15, 15, 0.042982],
        [15, 16, 0.019759],
        [15, 17, -0.009471],
        [15, 18, -0.018795],
        [15, 19, 0.00915],
        [15, 20, -0.010149],
        [15, 21, 0.07289],
        [15, 22, 0.022488],
        [15, 23, 0.032434],
        [15, 24, 0.004262],
        [15, 25, -0.006141],
        [15, 26, 0.000046],
        [15, 27, -0.014025],
        [15, 28, 0.019103],
        [15, 29, -0.014846],
        [15, 30, -0.012086],
        [15, 31, 0.015193],
        [15, 32, -0.004219],
        [15, 33, -0.041403],
        [15, 34, 0.005406],
        [15, 35, 0.003681],
        [15, 36, 0.01624],
        [15, 37, -0.011355],
        [16, 0, 0.005868],
        [16, 1, 0.023981],
        [16, 2, -0.008683],
        [16, 3, 0.018892],
        [16, 4, -0.00758],
        [16, 5, 0.007376],
        [16, 6, 0.004933],
        [16, 7, -0.03183],
        [16, 8, 0.008402],
        [16, 9, -0.015207],
        [16, 10, -0.006158],
        [16, 11, -0.026369],
        [16, 12, 0.023343],
        [16, 13, -0.018474],
        [16, 14, 0.030244],
        [16, 15, 0.006127],
        [16, 16, -0.017497],
        [16, 17, 0.009127],
        [16, 18, 0.018648],
        [16, 19, -0.018711],
        [16, 20, 0.03214],
        [16, 21, 0.039147],
        [16, 22, 0.029139],
        [16, 23, -0.0117],
        [16, 24, -0.037276],
        [16, 25, -0.005785],
        [16, 26, -0.013038],
        [16, 27, -0.00473],
        [16, 28, -0.017009],
        [16, 29, 0.001011],
        [16, 30, 0.037921],
        [16, 31, -0.031396],
        [16, 32, -0.000478],
        [16, 33, -0.012916],
        [16, 34, -0.004133],
        [16, 35, -0.014457],
        [16, 36, 0.009053],
        [16, 37, -0.03176],
        [17, 0, -0.014727],
        [17, 1, 0.016276],
        [17, 2, -0.00774],
        [17, 3, -0.008285],
        [17, 4, -0.01438],
        [17, 5, 0.044578],
        [17, 6, 0.016986],
        [17, 7, 0.040468],
        [17, 8, -0.00652],
        [17, 9, -0.026948],
        [17, 10, -0.000996],
        [17, 11, 0.015417],
        [17, 12, -0.012457],
        [17, 13, 0.028496],
        [17, 14, -0.040356],
        [17, 15, 0.016642],
        [17, 16, -0.043094],
        [17, 17, -0.030284],
        [17, 18, 0.036371],
        [17, 19, -0.019134],
        [17, 20, -0.014086],
        [17, 21, -0.032232],
        [17, 22, 0.025864],
        [17, 23, 0.016357],
        [17, 24, -0.04566],
        [17, 25, 0.00631],
        [17, 26, 0.007199],
        [17, 27, 0.024321],
        [17, 28, -0.043975],
        [17, 29, 0.002094],
        [17, 30, -0.054145],
        [17, 31, -0.010158],
        [17, 32, -0.044904],
        [17, 33, 0.021159],
        [17, 34, 0.036293],
        [17, 35, 0.00848],
        [17, 36, -0.005992],
        [17, 37, -0.009546],
        [18, 0, 0.039248],
        [18, 1, -0.027269],
        [18, 2, -0.013286],
        [18, 3, -0.010974],
        [18, 4, 0.023554],
        [18, 5, 0.030984],
        [18, 6, -0.024148],
        [18, 7, 0.009184],
        [18, 8, 0.013888],
        [18, 9, -0.03782],
        [18, 10, -0.039082],
        [18, 11, -0.007293],
        [18, 12, -0.00637],
        [18, 13, -0.029296],
        [18, 14, -0.06346],
        [18, 15, 0.035244],
        [18, 16, -0.025179],
        [18, 17, 0.042673],
        [18, 18, 0.012529],
        [18, 19, 0.047062],
        [18, 20, 0.000348],
        [18, 21, 0.078748],
        [18, 22, -0.048428],
        [18, 23, 0.036773],
        [18, 24, -0.001608],
        [18, 25, -0.013783],
        [18, 26, 0.039651],
        [18, 27, -0.01058],
        [18, 28, 0.062988],
        [18, 29, -0.024475],
        [18, 30, 0.008126],
        [18, 31, -0.013117],
        [18, 32, -0.016171],
        [18, 33, -0.029678],
        [18, 34, 0.030124],
        [18, 35, 0.004856],
        [18, 36, -0.008485],
        [18, 37, 0.028764],
        [19, 0, 0.000483],
        [19, 1, -0.025232],
        [19, 2, -0.061263],
        [19, 3, -0.011841],
        [19, 4, -0.007815],
        [19, 5, 0.008288],
        [19, 6, -0.020903],
        [19, 7, 0.011027],
        [19, 8, -0.034249],
        [19, 9, 0.019953],
        [19, 10, 0.000082],
        [19, 11, -0.006689],
        [19, 12, -0.005136],
        [19, 13, 0.027133],
        [19, 14, -0.013026],
        [19, 15, 0.03282],
        [19, 16, -0.009685],
        [19, 17, -0.012206],
        [19, 18, -0.002207],
        [19, 19, -0.065766],
        [19, 20, 0.025542],
        [19, 21, 0.049264],
        [19, 22, 0.013925],
        [19, 23, 0.0054],
        [19, 24, 0.009404],
        [19, 25, 0.007202],
        [19, 26, 0.002493],
        [19, 27, 0.024246],
        [19, 28, -0.007109],
        [19, 29, -0.001847],
        [19, 30, 0.002885],
        [19, 31, -0.013322],
        [19, 32, -0.01139],
        [19, 33, 0.006528],
        [19, 34, 0.045701],
        [19, 35, -0.047304],
        [19, 36, -0.031236],
        [19, 37, 0.003138],
        [20, 0, 0.015268],
        [20, 1, -0.019583],
        [20, 2, 0.004699],
        [20, 3, 0.00865],
        [20, 4, -0.004051],
        [20, 5, 0.008475],
        [20, 6, 0.004923],
        [20, 7, 0.00476],
        [20, 8, -0.019364],
        [20, 9, 0.018211],
        [20, 10, -0.021051],
        [20, 11, -0.012581],
        [20, 12, -0.021057],
        [20, 13, 0.023677],
        [20, 14, 0.01028],
        [20, 15, 0.021383],
        [20, 16, 0.037907],
        [20, 17, 0.024928],
        [20, 18, 0.012586],
        [20, 19, -0.031719],
        [20, 20, 0.021283],
        [20, 21, 0.033637],
        [20, 22, -0.015441],
        [20, 23, -0.002931],
        [20, 24, -0.019131],
        [20, 25, 0.01644],
        [20, 26, -0.003083],
        [20, 27, -0.009551],
        [20, 28, 0.020755],
        [20, 29, -0.026262],
        [20, 30, 0.012262],
        [20, 31, -0.018427],
        [20, 32, 0.022081],
        [20, 33, -0.009037],
        [20, 34, 0.016739],
        [20, 35, 0.030933],
        [20, 36, 0.018048],
        [20, 37, -0.052763],
        [21, 0, 0.000541],
        [21, 1, -0.038859],
        [21, 2, 0.003278],
        [21, 3, 0.001213],
        [21, 4, -0.028869],
        [21, 5, 0.047235],
        [21, 6, -0.038911],
        [21, 7, -0.036125],
        [21, 8, -0.048068],
        [21, 9, -0.012918],
        [21, 10, 0.002989],
        [21, 11, -0.02099],
        [21, 12, -0.010884],
        [21, 13, 0.040254],
        [21, 14, -0.001666],
        [21, 15, -0.002359],
        [21, 16, -0.004717],
        [21, 17, -0.023109],
        [21, 18, 0.007721],
        [21, 19, -0.02251],
        [21, 20, 0.024295],
        [21, 21, 0.026892],
        [21, 22, 0.006789],
        [21, 23, -0.04765],
        [21, 24, -0.012861],
        [21, 25, -0.023547],
        [21, 26, -0.006124],
        [21, 27, -0.009561],
        [21, 28, 0.014249],
        [21, 29, -0.022258],
        [21, 30, 0.026985],
        [21, 31, 0.006956],
        [21, 32, 0.017947],
        [21, 33, 0.004906],
        [21, 34, 0.034368],
        [21, 35, -0.032014],
        [21, 36, 0.033936],
        [21, 37, -0.042665],
        [22, 0, 0.001551],
        [22, 1, 0.014776],
        [22, 2, -0.024573],
        [22, 3, 0.018453],
        [22, 4, -0.021751],
        [22, 5, 0.052607],
        [22, 6, -0.012439],
        [22, 7, -0.023873],
        [22, 8, 0.003009],
        [22, 9, -0.014554],
        [22, 10, 0.044779],
        [22, 11, -0.011781],
        [22, 12, -0.007231],
        [22, 13, -0.00218],
        [22, 14, 0.00064],
        [22, 15, 0.007805],
        [22, 16, 0.047071],
        [22, 17, 0.00585],
        [22, 18, -0.003453],
        [22, 19, -0.005817],
        [22, 20, -0.009304],
        [22, 21, -0.009228],
        [22, 22, 0.010601],
        [22, 23, -0.040959],
        [22, 24, 0.009442],
        [22, 25, 0.024389],
        [22, 26, 0.038322],
        [22, 27, 0.037431],
        [22, 28, 0.002229],
        [22, 29, -0.010035],
        [22, 30, -0.02581],
        [22, 31, 0.01328],
        [22, 32, 0],
        [22, 33, 0.004299],
        [22, 34, 0.009783],
        [22, 35, 0.0065],
        [22, 36, 0.029096],
        [22, 37, -0.008824],
        [23, 0, -0.020921],
        [23, 1, -0.026457],
        [23, 2, 0.000708],
        [23, 3, 0.010224],
        [23, 4, -0.073393],
        [23, 5, -0.059671],
        [23, 6, -0.016096],
        [23, 7, -0.026433],
        [23, 8, 0.030143],
        [23, 9, 0.007305],
        [23, 10, -0.019093],
        [23, 11, -0.035875],
        [23, 12, -0.006415],
        [23, 13, -0.014258],
        [23, 14, -0.031968],
        [23, 15, -0.057322],
        [23, 16, 0.045795],
        [23, 17, 0.018414],
        [23, 18, -0.049117],
        [23, 19, 0.045465],
        [23, 20, -0.039823],
        [23, 21, 0.023708],
        [23, 22, -0.033113],
        [23, 23, 0.009838],
        [23, 24, 0.012346],
        [23, 25, 0.054147],
        [23, 26, 0.013523],
        [23, 27, -0.00549],
        [23, 28, 0.007118],
        [23, 29, 0.028609],
        [23, 30, 0.024661],
        [23, 31, -0.026071],
        [23, 32, -0.013525],
        [23, 33, -0.016586],
        [23, 34, 0.021441],
        [23, 35, -0.00499],
        [23, 36, 0.030556],
        [23, 37, -0.011303],
        [24, 0, 0.032426],
        [24, 1, -0.002612],
        [24, 2, -0.008686],
        [24, 3, -0.024259],
        [24, 4, 0.02501],
        [24, 5, -0.01032],
        [24, 6, -0.032149],
        [24, 7, 0.039054],
        [24, 8, -0.007172],
        [24, 9, 0.007512],
        [24, 10, -0.018631],
        [24, 11, 0.002851],
        [24, 12, -0.022489],
        [24, 13, 0.00164],
        [24, 14, 0.033715],
        [24, 15, -0.058178],
        [24, 16, -0.003544],
        [24, 17, -0.028485],
        [24, 18, -0.01913],
        [24, 19, -0.02304],
        [24, 20, -0.023269],
        [24, 21, -0.014883],
        [24, 22, 0.006566],
        [24, 23, -0.024706],
        [24, 24, -0.000267],
        [24, 25, -0.017672],
        [24, 26, 0.032948],
        [24, 27, 0.026936],
        [24, 28, 0.00982],
        [24, 29, 0.00369],
        [24, 30, -0.050824],
        [24, 31, -0.011466],
        [24, 32, 0.011066],
        [24, 33, 0.001999],
        [24, 34, -0.024058],
        [24, 35, -0.031525],
        [24, 36, -0.02575],
        [24, 37, 0.012039],
        [25, 0, 0.03358],
        [25, 1, 0.051232],
        [25, 2, 0.010348],
        [25, 3, 0.01435],
        [25, 4, -0.031156],
        [25, 5, 0.02774],
        [25, 6, 0.027566],
        [25, 7, -0.033822],
        [25, 8, -0.055192],
        [25, 9, -0.009184],
        [25, 10, -0.014272],
        [25, 11, 0.006134],
        [25, 12, -0.049236],
        [25, 13, -0.011066],
        [25, 14, -0.027622],
        [25, 15, -0.019685],
        [25, 16, 0.063143],
        [25, 17, 0.034395],
        [25, 18, -0.047181],
        [25, 19, 0.007247],
        [25, 20, 0.020827],
        [25, 21, 0.0626],
        [25, 22, 0.021042],
        [25, 23, 0.072285],
        [25, 24, -0.004344],
        [25, 25, -0.003553],
        [25, 26, 0.029587],
        [25, 27, 0.055111],
        [25, 28, 0.027494],
        [25, 29, 0.028393],
        [25, 30, -0.023096],
        [25, 31, -0.040574],
        [25, 32, 0.004254],
        [25, 33, 0.036899],
        [25, 34, -0.028808],
        [25, 35, 0.022716],
        [25, 36, 0.015175],
        [25, 37, -0.036503],
        [26, 0, 0.02781],
        [26, 1, 0.017316],
        [26, 2, -0.034974],
        [26, 3, 0.042543],
        [26, 4, -0.035795],
        [26, 5, -0.001096],
        [26, 6, 0.0242],
        [26, 7, 0.03277],
        [26, 8, -0.025536],
        [26, 9, -0.036291],
        [26, 10, 0.04702],
        [26, 11, 0.034732],
        [26, 12, 0.001543],
        [26, 13, 0.052979],
        [26, 14, 0.031109],
        [26, 15, -0.003462],
        [26, 16, 0.020889],
        [26, 17, 0.007564],
        [26, 18, -0.016042],
        [26, 19, 0.004789],
        [26, 20, -0.011463],
        [26, 21, -0.000841],
        [26, 22, 0.011212],
        [26, 23, -0.029022],
        [26, 24, 0.004721],
        [26, 25, 0.041243],
        [26, 26, 0.00187],
        [26, 27, 0.010079],
        [26, 28, 0.001047],
        [26, 29, 0.026028],
        [26, 30, -0.01924],
        [26, 31, 0.036011],
        [26, 32, 0.003251],
        [26, 33, -0.004313],
        [26, 34, 0.014058],
        [26, 35, 0.024737],
        [26, 36, -0.01028],
        [26, 37, 0.002082],
        [27, 0, 0.036905],
        [27, 1, 0.00272],
        [27, 2, 0.022676],
        [27, 3, -0.003181],
        [27, 4, 0.062494],
        [27, 5, 0.004175],
        [27, 6, -0.027082],
        [27, 7, 0.019025],
        [27, 8, 0.020899],
        [27, 9, -0.022202],
        [27, 10, -0.048355],
        [27, 11, -0.015566],
        [27, 12, 0.01333],
        [27, 13, 0.079095],
        [27, 14, -0.027365],
        [27, 15, -0.023365],
        [27, 16, 0.007518],
        [27, 17, -0.032892],
        [27, 18, 0.013148],
        [27, 19, 0.004362],
        [27, 20, -0.029478],
        [27, 21, -0.014349],
        [27, 22, 0.007018],
        [27, 23, -0.034028],
        [27, 24, -0.00753],
        [27, 25, -0.000781],
        [27, 26, 0.01184],
        [27, 27, -0.011873],
        [27, 28, -0.008487],
        [27, 29, 0.039657],
        [27, 30, -0.025369],
        [27, 31, 0.031745],
        [27, 32, 0.027953],
        [27, 33, -0.01115],
        [27, 34, -0.027203],
        [27, 35, 0.013229],
        [27, 36, -0.01251],
        [27, 37, 0.020724],
        [28, 0, 0.012652],
        [28, 1, 0.00049],
        [28, 2, 0.010775],
        [28, 3, 0.066278],
        [28, 4, -0.01414],
        [28, 5, -0.044729],
        [28, 6, -0.043005],
        [28, 7, 0.021829],
        [28, 8, 0.024871],
        [28, 9, -0.000551],
        [28, 10, -0.006506],
        [28, 11, -0.00143],
        [28, 12, 0.003595],
        [28, 13, -0.004011],
        [28, 14, 0.017613],
        [28, 15, 0.029939],
        [28, 16, 0.061863],
        [28, 17, -0.007777],
        [28, 18, 0.061214],
        [28, 19, 0.003571],
        [28, 20, -0.017041],
        [28, 21, 0.008136],
        [28, 22, -0.013247],
        [28, 23, 0.022393],
        [28, 24, 0.012297],
        [28, 25, -0.021787],
        [28, 26, -0.05542],
        [28, 27, 0.038087],
        [28, 28, 0.015655],
        [28, 29, -0.032548],
        [28, 30, -0.03864],
        [28, 31, -0.024044],
        [28, 32, -0.022006],
        [28, 33, 0.015341],
        [28, 34, 0.009405],
        [28, 35, 0.022728],
        [28, 36, 0.032276],
        [28, 37, -0.040226],
        [29, 0, -0.032215],
        [29, 1, -0.024191],
        [29, 2, -0.009368],
        [29, 3, 0.001169],
        [29, 4, -0.032066],
        [29, 5, -0.006632],
        [29, 6, 0.033828],
        [29, 7, 0.037063],
        [29, 8, -0.017344],
        [29, 9, -0.035653],
        [29, 10, -0.005906],
        [29, 11, -0.01523],
        [29, 12, -0.039295],
        [29, 13, 0.030393],
        [29, 14, -0.026169],
        [29, 15, 0.036962],
        [29, 16, -0.009788],
        [29, 17, -0.045567],
        [29, 18, 0.000871],
        [29, 19, -0.02093],
        [29, 20, 0.022788],
        [29, 21, 0.053093],
        [29, 22, 0.02655],
        [29, 23, -0.035213],
        [29, 24, 0.044878],
        [29, 25, -0.018628],
        [29, 26, 0.004728],
        [29, 27, 0.016219],
        [29, 28, 0.045104],
        [29, 29, 0.022266],
        [29, 30, 0.005279],
        [29, 31, 0.016477],
        [29, 32, -0.009587],
        [29, 33, 0.026597],
        [29, 34, 0.001787],
        [29, 35, -0.003036],
        [29, 36, -0.011097],
        [29, 37, -0.031761],
        [30, 0, -0.017763],
        [30, 1, 0.020884],
        [30, 2, 0.030994],
        [30, 3, -0.010992],
        [30, 4, 0.001055],
        [30, 5, -0.025104],
        [30, 6, -0.04716],
        [30, 7, 0.009575],
        [30, 8, 0.012306],
        [30, 9, 0.048501],
        [30, 10, 0.010439],
        [30, 11, -0.003682],
        [30, 12, 0.008651],
        [30, 13, -0.015781],
        [30, 14, 0.009107],
        [30, 15, -0.020465],
        [30, 16, -0.009562],
        [30, 17, -0.005514],
        [30, 18, -0.021611],
        [30, 19, -0.030036],
        [30, 20, 0.018783],
        [30, 21, -0.032787],
        [30, 22, 0.019929],
        [30, 23, -0.0386],
        [30, 24, 0.021715],
        [30, 25, 0.002274],
        [30, 26, 0.029657],
        [30, 27, -0.023415],
        [30, 28, -0.003983],
        [30, 29, 0.00929],
        [30, 30, 0.001254],
        [30, 31, -0.004107],
        [30, 32, -0.002161],
        [30, 33, -0.01857],
        [30, 34, -0.009436],
        [30, 35, 0.050517],
        [30, 36, -0.025089],
        [30, 37, 0.022098],
        [31, 0, 0.010094],
        [31, 1, -0.019943],
        [31, 2, -0.015515],
        [31, 3, -0.006078],
        [31, 4, 0.038123],
        [31, 5, -0.025613],
        [31, 6, 0.008093],
        [31, 7, 0.018319],
        [31, 8, -0.025581],
        [31, 9, -0.009638],
        [31, 10, -0.020275],
        [31, 11, 0.01138],
        [31, 12, -0.011644],
        [31, 13, -0.023941],
        [31, 14, 0.035062],
        [31, 15, -0.015909],
        [31, 16, 0.016911],
        [31, 17, 0.008452],
        [31, 18, -0.002658],
        [31, 19, -0.012234],
        [31, 20, -0.002533],
        [31, 21, -0.039314],
        [31, 22, 0.006608],
        [31, 23, 0.062817],
        [31, 24, 0.00015],
        [31, 25, 0.040086],
        [31, 26, -0.022494],
        [31, 27, -0.009378],
        [31, 28, -0.00072],
        [31, 29, 0.025243],
        [31, 30, -0.014975],
        [31, 31, 0.047924],
        [31, 32, -0.053977],
        [31, 33, -0.009889],
        [31, 34, -0.034451],
        [31, 35, -0.022571],
        [31, 36, 0.004139],
        [31, 37, 0.025713],
        [32, 0, 0.032715],
        [32, 1, 0.017686],
        [32, 2, 0.046426],
        [32, 3, 0.050591],
        [32, 4, -0.009717],
        [32, 5, -0.016894],
        [32, 6, -0.014033],
        [32, 7, 0.016474],
        [32, 8, -0.035365],
        [32, 9, -0.002872],
        [32, 10, 0.001622],
        [32, 11, -0.051722],
        [32, 12, 0.024656],
        [32, 13, -0.008716],
        [32, 14, -0.026442],
        [32, 15, 0.05284],
        [32, 16, 0.027472],
        [32, 17, 0.031793],
        [32, 18, -0.02307],
        [32, 19, -0.001817],
        [32, 20, -0.023982],
        [32, 21, -0.022829],
        [32, 22, 0.021653],
        [32, 23, -0.042671],
        [32, 24, -0.00091],
        [32, 25, -0.023073],
        [32, 26, 0.040871],
        [32, 27, 0.048994],
        [32, 28, -0.021917],
        [32, 29, -0.011836],
        [32, 30, -0.005506],
        [32, 31, 0.008329],
        [32, 32, 0.007641],
        [32, 33, -0.008463],
        [32, 34, 0.009057],
        [32, 35, -0.014091],
        [32, 36, -0.016683],
        [32, 37, -0.00131],
        [33, 0, 0.012465],
        [33, 1, 0.038342],
        [33, 2, 0.019988],
        [33, 3, 0.002751],
        [33, 4, 0.028869],
        [33, 5, 0.001215],
        [33, 6, 0.027861],
        [33, 7, 0.009715],
        [33, 8, 0.001574],
        [33, 9, 0.010041],
        [33, 10, -0.001389],
        [33, 11, -0.01838],
        [33, 12, -0.013587],
        [33, 13, -0.004276],
        [33, 14, -0.040852],
        [33, 15, 0.052869],
        [33, 16, -0.005045],
        [33, 17, 0.032966],
        [33, 18, -0.013057],
        [33, 19, -0.000355],
        [33, 20, -0.024964],
        [33, 21, -0.023001],
        [33, 22, 0.035097],
        [33, 23, 0.009403],
        [33, 24, 0.028281],
        [33, 25, -0.012302],
        [33, 26, -0.015468],
        [33, 27, 0.034815],
        [33, 28, 0.037438],
        [33, 29, -0.017408],
        [33, 30, -0.037407],
        [33, 31, -0.036414],
        [33, 32, -0.029964],
        [33, 33, -0.011369],
        [33, 34, 0.007598],
        [33, 35, -0.050303],
        [33, 36, -0.005081],
        [33, 37, 0.017978],
        [34, 0, 0.00933],
        [34, 1, 0.012685],
        [34, 2, 0.014534],
        [34, 3, -0.010319],
        [34, 4, 0.001941],
        [34, 5, -0.003691],
        [34, 6, 0.021461],
        [34, 7, -0.001583],
        [34, 8, -0.032296],
        [34, 9, 0.041021],
        [34, 10, 0.012336],
        [34, 11, -0.011474],
        [34, 12, 0.05716],
        [34, 13, 0.034921],
        [34, 14, 0.010443],
        [34, 15, -0.006422],
        [34, 16, 0.013592],
        [34, 17, -0.018142],
        [34, 18, -0.026166],
        [34, 19, 0.012238],
        [34, 20, -0.020432],
        [34, 21, -0.001362],
        [34, 22, -0.012939],
        [34, 23, -0.008818],
        [34, 24, -0.000341],
        [34, 25, -0.010722],
        [34, 26, 0.00269],
        [34, 27, -0.021839],
        [34, 28, 0.025611],
        [34, 29, 0.05346],
        [34, 30, 0.060858],
        [34, 31, -0.029581],
        [34, 32, 0.029805],
        [34, 33, -0.016969],
        [34, 34, -0.015217],
        [34, 35, -0.061829],
        [34, 36, 0.022841],
        [34, 37, -0.006714],
        [35, 0, -0.014091],
        [35, 1, 0.005816],
        [35, 2, 0.07048],
        [35, 3, -0.062303],
        [35, 4, 0.020736],
        [35, 5, 0.035089],
        [35, 6, -0.023782],
        [35, 7, 0.009522],
        [35, 8, -0.014763],
        [35, 9, 0.022968],
        [35, 10, -0.002692],
        [35, 11, 0.027873],
        [35, 12, 0.003288],
        [35, 13, 0.004815],
        [35, 14, -0.024683],
        [35, 15, 0.031997],
        [35, 16, -0.050776],
        [35, 17, -0.023888],
        [35, 18, -0.017117],
        [35, 19, -0.005457],
        [35, 20, 0.002265],
        [35, 21, -0.016807],
        [35, 22, 0.009306],
        [35, 23, -0.029977],
        [35, 24, 0.010778],
        [35, 25, -0.007594],
        [35, 26, -0.002572],
        [35, 27, 0.027825],
        [35, 28, 0.030029],
        [35, 29, 0.006765],
        [35, 30, -0.022948],
        [35, 31, 0.014952],
        [35, 32, -0.01723],
        [35, 33, 0.012086],
        [35, 34, -0.012164],
        [35, 35, -0.055017],
        [35, 36, 0.004474],
        [35, 37, 0.000508],
        [36, 0, 0.029984],
        [36, 1, 0.011175],
        [36, 2, 0.00536],
        [36, 3, 0.014699],
        [36, 4, 0.019425],
        [36, 5, 0.022063],
        [36, 6, -0.009542],
        [36, 7, 0.024598],
        [36, 8, 0.009955],
        [36, 9, -0.02525],
        [36, 10, -0.017274],
        [36, 11, -0.004072],
        [36, 12, 0.012371],
        [36, 13, 0.035233],
        [36, 14, 0.002708],
        [36, 15, -0.042543],
        [36, 16, -0.017979],
        [36, 17, 0.002637],
        [36, 18, 0.003209],
        [36, 19, 0.039836],
        [36, 20, -0.006357],
        [36, 21, -0.025873],
        [36, 22, 0.022545],
        [36, 23, 0.054849],
        [36, 24, 0.012649],
        [36, 25, -0.02895],
        [36, 26, 0.001714],
        [36, 27, 0.0011],
        [36, 28, -0.001516],
        [36, 29, 0.029252],
        [36, 30, -0.013025],
        [36, 31, 0.013811],
        [36, 32, 0.024876],
        [36, 33, 0.014881],
        [36, 34, -0.022117],
        [36, 35, 0.009276],
        [36, 36, 0.026584],
        [36, 37, 0.022238],
        [37, 0, -0.015899],
        [37, 1, -0.010427],
        [37, 2, 0.01014],
        [37, 3, 0.025553],
        [37, 4, -0.007118],
        [37, 5, -0.041452],
        [37, 6, 0.037888],
        [37, 7, -0.037366],
        [37, 8, -0.006657],
        [37, 9, -0.027018],
        [37, 10, -0.033696],
        [37, 11, -0.006414],
        [37, 12, -0.033922],
        [37, 13, -0.007185],
        [37, 14, 0.025747],
        [37, 15, 0.029429],
        [37, 16, -0.008878],
        [37, 17, 0.02989],
        [37, 18, 0.000645],
        [37, 19, -0.000415],
        [37, 20, 0.008928],
        [37, 21, -0.004237],
        [37, 22, -0.01069],
        [37, 23, 0.009136],
        [37, 24, 0.032396],
        [37, 25, -0.003809],
        [37, 26, -0.002385],
        [37, 27, 0.027653],
        [37, 28, 0.020999],
        [37, 29, -0.041986],
        [37, 30, 0.015697],
        [37, 31, 0.010705],
        [37, 32, -0.001115],
        [37, 33, -0.010233],
        [37, 34, 0.037436],
        [37, 35, 0.017715],
        [37, 36, 0.056612],
        [37, 37, -0.024973],
        [38, 0, -0.01272],
        [38, 1, 0.000543],
        [38, 2, -0.019448],
        [38, 3, -0.024627],
        [38, 4, 0.026919],
        [38, 5, 0.009987],
        [38, 6, 0.011029],
        [38, 7, 0.063534],
        [38, 8, -0.040781],
        [38, 9, -0.000773],
        [38, 10, -0.028158],
        [38, 11, -0.005336],
        [38, 12, -0.001825],
        [38, 13, 0.008335],
        [38, 14, 0.052049],
        [38, 15, 0.012607],
        [38, 16, -0.01938],
        [38, 17, -0.003161],
        [38, 18, -0.013101],
        [38, 19, 0.024902],
        [38, 20, -0.016957],
        [38, 21, 0.025663],
        [38, 22, 0.022466],
        [38, 23, 0.020302],
        [38, 24, -0.008921],
        [38, 25, -0.00274],
        [38, 26, -0.006724],
        [38, 27, 0.005448],
        [38, 28, 0.054983],
        [38, 29, 0.010263],
        [38, 30, 0.01558],
        [38, 31, 0.014594],
        [38, 32, 0.016081],
        [38, 33, -0.058497],
        [38, 34, -0.003062],
        [38, 35, -0.023772],
        [38, 36, 0.009911],
        [38, 37, -0.009204],
      ],
      xData: [
        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,
        25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37,
      ],
      yData: [
        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,
        25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38,
      ],
    });
  });

  test('transformTransactionsChartData should works correctly', () => {
    const data = [
      {
        label: '1676231977',
        value: 22.1578,
      },
      {
        label: '1676232126',
        value: 52.9461,
      },
      {
        label: '1676232184',
        value: 58.1789,
      },
    ];
    const data1 = [
      {
        label: '1676231977000',
        value: 22.87468,
      },
      {
        label: '1676232126000',
        value: 52.18792,
      },
      {
        label: '1676232184000',
        value: 58.3594,
      },
    ];
    expect(transformTransactionsChartData(data as TChartResponseItem[], '30d')).toEqual({
      dataX: [
        new Date(1676231977000).toLocaleString(),
        new Date(1676232126000).toLocaleString(),
        new Date(1676232184000).toLocaleString(),
      ],
      dataY: [22.16, 52.95, 58.18],
    });
    expect(transformTransactionsChartData(data as TChartResponseItem[], '30d', true, 3)).toEqual({
      dataX: [
        new Date(1676231977000).toLocaleString(),
        new Date(1676232126000).toLocaleString(),
        new Date(1676232184000).toLocaleString(),
      ],
      dataY: [22.158, 52.946, 58.179],
    });
    expect(transformTransactionsChartData(data1 as TChartResponseItem[], '30d', false)).toEqual({
      dataX: [
        new Date(1676231977000).toLocaleString(),
        new Date(1676232126000).toLocaleString(),
        new Date(1676232184000).toLocaleString(),
      ],
      dataY: [22.87, 52.19, 58.36],
    });
    expect(transformTransactionsChartData(data1 as TChartResponseItem[], '30d', false, 3)).toEqual({
      dataX: [
        new Date(1676231977000).toLocaleString(),
        new Date(1676232126000).toLocaleString(),
        new Date(1676232184000).toLocaleString(),
      ],
      dataY: [22.875, 52.188, 58.359],
    });
  });
});
